{"displayTimeUnit":"ns","traceEvents":[{"pid":0,"ph":"M","name":"process_name","args":{"name":"clangd"}},{"pid":0,"ph":"i","name":"Log","ts":170.30000000000001,"tid":47116,"args":{"Message":"clangd version 18.1.3 (https://github.com/llvm/llvm-project c13b7485b87909fcf739f62cfa382b55407433c0)"}},{"pid":0,"ph":"i","name":"Log","ts":2186.5999999999999,"tid":47116,"args":{"Message":"Features: windows+grpc"}},{"pid":0,"ph":"i","name":"Log","ts":2237.6999999999998,"tid":47116,"args":{"Message":"PID: 37332"}},{"pid":0,"ph":"i","name":"Log","ts":2269.0999999999999,"tid":47116,"args":{"Message":"Working directory: g:\\1"}},{"pid":0,"ph":"i","name":"Log","ts":2293.1999999999998,"tid":47116,"args":{"Message":"argv[0]: c:\\Users\\27622\\AppData\\Roaming\\Code\\User\\globalStorage\\llvm-vs-code-extensions.vscode-clangd\\install\\18.1.3\\clangd_18.1.3\\bin\\clangd.exe"}},{"pid":0,"ph":"i","name":"Log","ts":2309,"tid":47116,"args":{"Message":"argv[1]: --compile-commands-dir=g:\\1\\Modbus_f030\\demo\\MDK-ARM\\out\\demo\\demo"}},{"pid":0,"ph":"i","name":"Log","ts":20581.099999999999,"tid":47116,"args":{"Message":"Starting LSP over stdin/stdout"}},{"pid":0,"ph":"i","name":"Log","ts":328881.90000000002,"tid":47116,"args":{"Message":"<-- initialize(0)"}},{"pid":0,"ph":"i","name":"Log","ts":337266,"tid":47116,"args":{"Message":"--> reply:initialize(0) 8 ms"}},{"pid":0,"ph":"X","name":"initialize","ts":328243.09999999998,"tid":47116,"dur":9648.9000000000233,"args":{"Params":{"capabilities":{"general":{"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"],"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]}},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}},"textDocument":{"callHierarchy":{"dynamicRegistration":true},"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dataSupport":true,"disabledSupport":true,"dynamicRegistration":true,"honorsChangeAnnotations":true,"isPreferredSupport":true,"resolveSupport":{"properties":["edit"]}},"codeLens":{"dynamicRegistration":true},"colorProvider":{"dynamicRegistration":true},"completion":{"completionItem":{"commitCharactersSupport":true,"deprecatedSupport":true,"documentationFormat":["markdown","plaintext"],"insertReplaceSupport":true,"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true,"preselectSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"snippetSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]},"contextSupport":true,"dynamicRegistration":true,"editsNearCursor":true,"insertTextMode":2},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false},"documentHighlight":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"documentSymbol":{"dynamicRegistration":true,"hierarchicalDocumentSymbolSupport":true,"labelSupport":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"foldingRange":{"dynamicRegistration":true,"foldingRange":{"collapsedText":false},"foldingRangeKind":{"valueSet":["comment","imports","region"]},"lineFoldingOnly":true,"rangeLimit":5000},"formatting":{"dynamicRegistration":true},"hover":{"contentFormat":["markdown","plaintext"],"dynamicRegistration":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"inactiveRegionsCapabilities":{"inactiveRegions":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"inlineValue":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"publishDiagnostics":{"codeDescriptionSupport":true,"dataSupport":true,"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false},"rangeFormatting":{"dynamicRegistration":true,"rangesSupport":true},"references":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"honorsChangeAnnotations":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1},"selectionRange":{"dynamicRegistration":true},"semanticTokens":{"augmentsSyntaxTokens":true,"dynamicRegistration":true,"formats":["relative"],"multilineTokenSupport":false,"overlappingTokenSupport":false,"requests":{"full":{"delta":true},"range":true},"serverCancelSupport":true,"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"]},"signatureHelp":{"contextSupport":true,"dynamicRegistration":true,"signatureInformation":{"activeParameterSupport":true,"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true,"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"typeHierarchy":{"dynamicRegistration":true}},"window":{"showDocument":{"support":true},"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"workDoneProgress":true},"workspace":{"applyEdit":true,"codeLens":{"refreshSupport":true},"configuration":true,"diagnostics":{"refreshSupport":true},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"executeCommand":{"dynamicRegistration":true},"fileOperations":{"didCreate":true,"didDelete":true,"didRename":true,"dynamicRegistration":true,"willCreate":true,"willDelete":true,"willRename":true},"foldingRange":{"refreshSupport":true},"inlayHint":{"refreshSupport":true},"inlineValue":{"refreshSupport":true},"semanticTokens":{"refreshSupport":true},"symbol":{"dynamicRegistration":true,"resolveSupport":{"properties":["location.range"]},"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"workspaceEdit":{"changeAnnotationSupport":{"groupsOnLabel":true},"documentChanges":true,"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"resourceOperations":["create","rename","delete"]},"workspaceFolders":true}},"clientInfo":{"name":"Visual Studio Code","version":"1.102.1"},"initializationOptions":{"clangdFileStatus":true,"fallbackFlags":["-Ig:\\1"]},"locale":"zh-cn","processId":39032,"rootPath":"g:\\1","rootUri":"file:///g%3A/1","trace":"off","workspaceFolders":[{"name":"1","uri":"file:///g%3A/1"}]},"Reply":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"clangdInlayHintsProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/","*"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"foldingRangeProvider":true,"hoverProvider":true,"implementationProvider":true,"inactiveRegionsProvider":true,"inlayHintProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":["declaration","definition","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","usedAsMutablePointer","constructorOrDestructor","userDefined","functionScope","classScope","fileScope","globalScope"],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","modifier","operator","bracket","label","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","<",">",","]},"standardTypeHierarchyProvider":true,"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeDefinitionProvider":true,"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 18.1.3 (https://github.com/llvm/llvm-project c13b7485b87909fcf739f62cfa382b55407433c0) windows+grpc x86_64-pc-windows-msvc"}}}},{"pid":0,"ph":"i","name":"Log","ts":787582.30000000005,"tid":47116,"args":{"Message":"<-- initialized"}},{"pid":0,"ph":"X","name":"initialized","ts":787559.5,"tid":47116,"dur":121.5,"args":{"Params":{}}},{"pid":0,"ph":"i","name":"Log","ts":897155.5,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":897311.5,"tid":47116,"dur":183.80000000004657,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":897818.19999999995,"tid":47116,"dur":8.5,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":897130.90000000002,"tid":47116,"id":0,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":898015.40000000002,"tid":51204,"bp":"e","id":0,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"ConfigCompile","ts":902619.90000000002,"tid":51204,"dur":140.29999999993015,"args":{"ConfigFile":"C:\\Users\\27622\\AppData\\Local\\clangd\\config.yaml"}},{"pid":0,"ph":"X","name":"ConfigCompile","ts":902794.30000000005,"tid":51204,"dur":87.299999999930151,"args":{"ConfigFile":"C:\\Users\\27622\\AppData\\Local\\clangd\\config.yaml"}},{"pid":0,"ph":"X","name":"getConfig","ts":898021.80000000005,"tid":51204,"dur":4945.2999999999302,"args":{"path":"g:/1/Modbus_f030/demo/Core/Inc/stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"i","name":"Log","ts":903027.09999999998,"tid":51204,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"X","name":"getConfig","ts":903101.5,"tid":51204,"dur":11,"args":{"path":"g:/1/Modbus_f030/demo/Core/Inc/stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"i","name":"Log","ts":905707.59999999998,"tid":51204,"args":{"Message":"Loaded compilation database from g:\\1\\Modbus_f030\\demo\\MDK-ARM\\out\\demo\\demo\\compile_commands.json"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":1,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":905886.30000000005,"tid":37768,"bp":"e","id":1,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":906247.09999999998,"tid":51204,"dur":1067.8000000000466,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":907450.19999999995,"tid":51204,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Core\\Inc\\stm32f0xx_hal_conf.h version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Core\\Src\\adc.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -x c-header -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Core\\\\Inc\\\\stm32f0xx_hal_conf.h\""}},{"pid":0,"ph":"X","name":"getConfig","ts":905869.09999999998,"tid":37768,"dur":2812.3000000000466,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":2,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":908772.19999999995,"tid":37768,"bp":"e","id":2,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":908718.40000000002,"tid":37768,"dur":1060.1999999999534,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/errno.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":3,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":909814.59999999998,"tid":37768,"bp":"e","id":3,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":909806.69999999995,"tid":37768,"dur":824.60000000009313,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/main.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":4,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":910662.19999999995,"tid":37768,"bp":"e","id":4,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":910655.30000000005,"tid":37768,"dur":456.39999999990687,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/timers.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":5,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":911135.09999999998,"tid":37768,"bp":"e","id":5,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":911129.40000000002,"tid":37768,"dur":36.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc_ex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":6,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":911183,"tid":37768,"bp":"e","id":6,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":911178.59999999998,"tid":37768,"dur":12.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/gpio.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":7,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":911208.09999999998,"tid":37768,"bp":"e","id":7,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":911203.69999999995,"tid":37768,"dur":252.60000000009313,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart_ex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":8,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":911472.80000000005,"tid":37768,"bp":"e","id":8,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":911751.69999999995,"tid":50808,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":9,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":911923.59999999998,"tid":50808,"bp":"e","id":9,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"ConfigCompile","ts":914250.19999999995,"tid":37768,"dur":48.800000000046566,"args":{"ConfigFile":"G:\\QianSai\\Modbus_f030\\demo\\MDK-ARM\\.clangd"}},{"pid":0,"ph":"X","name":"getConfig","ts":911468.19999999995,"tid":37768,"dur":2923.1000000000931,"args":{"path":"G:/QianSai/Modbus_f030/demo/MDK-ARM/startup_stm32f030xc.s"}},{"pid":0,"ph":"i","name":"Log","ts":914420.09999999998,"tid":37768,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":10,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914495.59999999998,"tid":37768,"bp":"e","id":10,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914488.59999999998,"tid":37768,"dur":21.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr_ex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":11,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914524.90000000002,"tid":37768,"bp":"e","id":11,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914519.09999999998,"tid":37768,"dur":14.400000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/stm32f0xx_hal_msp.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":12,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914545.5,"tid":37768,"bp":"e","id":12,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914541.19999999995,"tid":37768,"dur":12.400000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/usart.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":13,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914565.5,"tid":37768,"bp":"e","id":13,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914561.19999999995,"tid":37768,"dur":13.600000000093132,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/croutine.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":14,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914586.40000000002,"tid":37768,"bp":"e","id":14,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914582.40000000002,"tid":37768,"dur":11.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":15,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914606.5,"tid":37768,"bp":"e","id":15,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914602,"tid":37768,"dur":12.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/queue.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":16,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":914626.30000000005,"tid":37768,"bp":"e","id":16,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":914621.69999999995,"tid":37768,"dur":1425.6000000000931,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":17,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916103.40000000002,"tid":37768,"bp":"e","id":17,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916093.80000000005,"tid":37768,"dur":25.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_flash.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":18,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916133.40000000002,"tid":37768,"bp":"e","id":18,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916129.09999999998,"tid":37768,"dur":13.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/adc.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":19,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916157.09999999998,"tid":37768,"bp":"e","id":19,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916152.69999999995,"tid":37768,"dur":13.200000000069849,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_tim_ex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":20,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916193.90000000002,"tid":37768,"bp":"e","id":20,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916173.40000000002,"tid":37768,"dur":29.299999999930151,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/system_stm32f0xx.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":21,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916214.59999999998,"tid":37768,"bp":"e","id":21,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916210.40000000002,"tid":37768,"dur":12.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":22,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916237.19999999995,"tid":37768,"bp":"e","id":22,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916232.30000000005,"tid":37768,"dur":13.399999999906868,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_exti.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":23,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916258,"tid":37768,"bp":"e","id":23,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916253.59999999998,"tid":37768,"dur":12.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":24,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916280.69999999995,"tid":37768,"bp":"e","id":24,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916275.5,"tid":37768,"dur":15,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":25,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":916302.69999999995,"tid":37768,"bp":"e","id":25,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916298.19999999995,"tid":37768,"dur":674.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0/port.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":26,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917003,"tid":37768,"bp":"e","id":26,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":916995.90000000002,"tid":37768,"dur":21.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":27,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917032.90000000002,"tid":37768,"bp":"e","id":27,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917027.80000000005,"tid":37768,"dur":15.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_i2c.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":28,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917061.80000000005,"tid":37768,"bp":"e","id":28,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917057.40000000002,"tid":37768,"dur":29.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/i2c.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":29,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917100.09999999998,"tid":37768,"bp":"e","id":29,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917095.19999999995,"tid":37768,"dur":14,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":30,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917125.5,"tid":37768,"bp":"e","id":30,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917121,"tid":37768,"dur":14.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-st-rtu.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":31,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917149.5,"tid":37768,"bp":"e","id":31,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917144.80000000005,"tid":37768,"dur":455,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":32,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917622.90000000002,"tid":37768,"bp":"e","id":32,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917617,"tid":37768,"dur":16.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/tasks.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":33,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917645.80000000005,"tid":37768,"bp":"e","id":33,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917641.30000000005,"tid":37768,"dur":13,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_i2c_ex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":34,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917666.40000000002,"tid":37768,"bp":"e","id":34,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917662,"tid":37768,"dur":11.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/freertos.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":35,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917685.80000000005,"tid":37768,"bp":"e","id":35,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917681.30000000005,"tid":37768,"dur":13.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":36,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917707.30000000005,"tid":37768,"bp":"e","id":36,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917703.09999999998,"tid":37768,"dur":12.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-data.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":37,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917727.59999999998,"tid":37768,"bp":"e","id":37,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917723.19999999995,"tid":37768,"dur":13.400000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/list.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":38,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":917749.19999999995,"tid":37768,"bp":"e","id":38,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":917744.40000000002,"tid":37768,"dur":404.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/Module_driver/uart_device.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":39,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918173.40000000002,"tid":37768,"bp":"e","id":39,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918166.19999999995,"tid":37768,"dur":25.100000000093132,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_gpio.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":40,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918211.5,"tid":37768,"bp":"e","id":40,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918204.80000000005,"tid":37768,"dur":20.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/stm32f0xx_it.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":41,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918243.30000000005,"tid":37768,"bp":"e","id":41,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918237.80000000005,"tid":37768,"dur":14.899999999906868,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":42,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918266.59999999998,"tid":37768,"bp":"e","id":42,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918261.80000000005,"tid":37768,"dur":13.399999999906868,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_flash_ex.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":43,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918286.59999999998,"tid":37768,"bp":"e","id":43,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918281.80000000005,"tid":37768,"dur":13.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_tim.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":44,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918336,"tid":37768,"bp":"e","id":44,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918329.5,"tid":37768,"dur":19.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":898003.69999999995,"tid":51204,"id":45,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":918367.09999999998,"tid":37768,"bp":"e","id":45,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":918360.40000000002,"tid":37768,"dur":18.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc_ex.c"}},{"pid":0,"ph":"i","name":"Log","ts":918599.69999999995,"tid":37768,"args":{"Message":"--> window/workDoneProgress/create(0)"}},{"pid":0,"ph":"X","name":"getConfig","ts":918687.5,"tid":54996,"dur":4.5999999999767169,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":918726.5,"tid":54996,"args":{"Message":"Enqueueing 44 commands for indexing"}},{"pid":0,"ph":"X","name":"getConfig","ts":918878.90000000002,"tid":54996,"dur":11.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":918904.90000000002,"tid":54996,"dur":36.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/errno.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":918952.09999999998,"tid":54996,"dur":136.09999999997672,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/main.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919128.90000000002,"tid":54996,"dur":9.9000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/timers.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919147.09999999998,"tid":54996,"dur":5.5999999999767169,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919160.09999999998,"tid":54996,"dur":4.3000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/gpio.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919171.19999999995,"tid":54996,"dur":4.2000000000698492,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919182.09999999998,"tid":54996,"dur":144.59999999997672,"args":{"path":"G:/QianSai/Modbus_f030/demo/MDK-ARM/startup_stm32f030xc.s"}},{"pid":0,"ph":"X","name":"getConfig","ts":919358.80000000005,"tid":54996,"dur":7.6999999999534339,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919374.69999999995,"tid":54996,"dur":5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/stm32f0xx_hal_msp.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919387.69999999995,"tid":54996,"dur":4.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/usart.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919399,"tid":54996,"dur":4.4000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/croutine.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919409.90000000002,"tid":54996,"dur":4.4000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919420.5,"tid":54996,"dur":4.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/queue.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":919431.90000000002,"tid":54996,"dur":835.29999999993015,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920370.69999999995,"tid":54996,"dur":11.100000000093132,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_flash.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920389.59999999998,"tid":54996,"dur":6.5999999999767169,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/adc.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920402.80000000005,"tid":54996,"dur":28.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_tim_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920439.59999999998,"tid":54996,"dur":4.8000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/system_stm32f0xx.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920451.19999999995,"tid":54996,"dur":5.2000000000698492,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920463.09999999998,"tid":54996,"dur":4.4000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_exti.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920474.40000000002,"tid":54996,"dur":4,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920485.59999999998,"tid":54996,"dur":5.0999999999767169,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920497.40000000002,"tid":54996,"dur":8.5999999999767169,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0/port.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920512.80000000005,"tid":54996,"dur":4.3999999999068677,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920523.5,"tid":54996,"dur":4.8000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_i2c.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920534.59999999998,"tid":54996,"dur":4.2000000000698492,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/i2c.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920545.69999999995,"tid":54996,"dur":4.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920556.19999999995,"tid":54996,"dur":4.2000000000698492,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-st-rtu.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920566.69999999995,"tid":54996,"dur":5.8000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920579,"tid":54996,"dur":4.3000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/tasks.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920589.69999999995,"tid":54996,"dur":4.4000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_i2c_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920600.19999999995,"tid":54996,"dur":4.3000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/freertos.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920610.80000000005,"tid":54996,"dur":4.1999999999534339,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920621.19999999995,"tid":54996,"dur":4.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-data.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920631.69999999995,"tid":54996,"dur":4.3000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/list.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920642.09999999998,"tid":54996,"dur":4,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/Module_driver/uart_device.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920652.19999999995,"tid":54996,"dur":4,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_gpio.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920662,"tid":54996,"dur":3.6999999999534339,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/stm32f0xx_it.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920671.69999999995,"tid":54996,"dur":4,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920682.19999999995,"tid":54996,"dur":4,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_flash_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920692.30000000005,"tid":54996,"dur":3.8999999999068677,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_tim.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920703.19999999995,"tid":54996,"dur":4.7000000000698492,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920714.09999999998,"tid":54996,"dur":3.9000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":920745.80000000005,"tid":54996,"dur":4.2999999999301508,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":922420.80000000005,"tid":54996,"dur":538.89999999990687,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":923649.80000000005,"tid":54996,"dur":1657.0999999999767,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":925905,"tid":54996,"dur":20.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":927013,"tid":54996,"dur":15.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_exti.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":927608.5,"tid":54996,"dur":14.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":928586.19999999995,"tid":54996,"dur":20.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":928969.19999999995,"tid":54996,"dur":19.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":929691.80000000005,"tid":54996,"dur":14.799999999930151,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":930216.69999999995,"tid":54996,"dur":15,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pwr.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":930517.30000000005,"tid":54996,"dur":10.399999999906868,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":930886.90000000002,"tid":54996,"dur":13.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":933416.69999999995,"tid":54996,"dur":36.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":933910,"tid":54996,"dur":16.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":934580,"tid":54996,"dur":25.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":935091.59999999998,"tid":54996,"dur":21,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":935493.90000000002,"tid":54996,"dur":24.900000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":935939,"tid":54996,"dur":15.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":936306.40000000002,"tid":54996,"dur":19,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":936720.5,"tid":54996,"dur":14.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":937063.80000000005,"tid":54996,"dur":36.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pwr_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":937451.40000000002,"tid":54996,"dur":11.900000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":937737.80000000005,"tid":54996,"dur":9.8999999999068677,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":938290.09999999998,"tid":54996,"dur":9.4000000000232831,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":938573,"tid":54996,"dur":8.6999999999534339,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash_ex.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":939012.5,"tid":54996,"dur":6750,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/stddef.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":946348,"tid":54996,"dur":2775.5999999999767,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":949628.19999999995,"tid":54996,"dur":455.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":952463.19999999995,"tid":54996,"dur":54,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030xc.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":961370.90000000002,"tid":54996,"dur":30.900000000023283,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/stdint.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":962075.5,"tid":54996,"dur":838.30000000004657,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Include/core_cm0.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":964456.09999999998,"tid":54996,"dur":27.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":964917.40000000002,"tid":54996,"dur":20.900000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Include/cmsis_version.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":965215.90000000002,"tid":54996,"dur":10.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Include/cmsis_compiler.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":966709.30000000005,"tid":54996,"dur":43.299999999930151,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/CMSIS/Include/cmsis_gcc.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":967582.69999999995,"tid":54996,"dur":15.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/errno.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":967946.09999999998,"tid":54996,"dur":12.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/main.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":968476.30000000005,"tid":54996,"dur":11.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/adc.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":968975.30000000005,"tid":54996,"dur":32.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/dma.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":969315.59999999998,"tid":54996,"dur":10.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/main.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":969547.80000000005,"tid":54996,"dur":9.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/iwdg.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":969807.69999999995,"tid":54996,"dur":8.2000000000698492,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/usart.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":970070.09999999998,"tid":54996,"dur":10.700000000069849,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/i2c.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":970369.90000000002,"tid":54996,"dur":9.2999999999301508,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/tim.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":970625,"tid":54996,"dur":9,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/gpio.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":970892.80000000005,"tid":54996,"dur":12.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":971436.19999999995,"tid":54996,"dur":14.900000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":972909.69999999995,"tid":54996,"dur":488.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":974331.80000000005,"tid":54996,"dur":25,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":974760.09999999998,"tid":54996,"dur":14.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/FreeRTOSConfig.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":975396.40000000002,"tid":54996,"dur":18.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":975759.30000000005,"tid":54996,"dur":14.799999999930151,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/mpu_wrappers.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":976066.5,"tid":54996,"dur":14.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0/portmacro.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":976555.30000000005,"tid":54996,"dur":15.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/deprecated_definitions.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":977295.59999999998,"tid":54996,"dur":15.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/timers.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":980359.69999999995,"tid":54996,"dur":27.700000000069849,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":983864.30000000005,"tid":54996,"dur":27.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":984367.30000000005,"tid":54996,"dur":17.199999999953434,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/stdlib.h"}},{"pid":0,"ph":"i","name":"Log","ts":984829.30000000005,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":985060.69999999995,"tid":47116,"dur":75.700000000069849,"args":{}},{"pid":0,"ph":"X","name":"getConfig","ts":985190.59999999998,"tid":54996,"dur":34,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/task.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":987261.90000000002,"tid":54996,"dur":159,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":988118.19999999995,"tid":54996,"dur":24.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":988991.09999999998,"tid":54996,"dur":78.900000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/gpio.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":989501.09999999998,"tid":54996,"dur":15.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":990090,"tid":54996,"dur":123.59999999997672,"args":{"path":"G:/QianSai/Modbus_f030/demo/MDK-ARM/startup_stm32f030xc.s"}},{"pid":0,"ph":"X","name":"getConfig","ts":990321.5,"tid":54996,"dur":9.8000000000465661,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":990602.09999999998,"tid":54996,"dur":10.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/stm32f0xx_hal_msp.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":990895.69999999995,"tid":54996,"dur":9.1000000000931323,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/usart.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":991642.09999999998,"tid":54996,"dur":15.900000000023283,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/croutine.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":991947.80000000005,"tid":54996,"dur":12.099999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/croutine.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":992316.59999999998,"tid":54996,"dur":12.200000000069849,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c"}},{"pid":0,"ph":"i","name":"Log","ts":992492.30000000005,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":992590.30000000005,"tid":47116,"dur":30,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":992838.59999999998,"tid":47116,"dur":3.3000000000465661,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":992451.5,"tid":47116,"id":46,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":993113.30000000005,"tid":40552,"bp":"e","id":46,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":993117.19999999995,"tid":54996,"dur":36.200000000069849,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/queue.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":993118.80000000005,"tid":40552,"dur":481.39999999990687,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/main.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":993624.59999999998,"tid":40552,"dur":7.9000000000232831,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/main.c"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":994244.09999999998,"tid":40552,"dur":180.30000000004657,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":994498.59999999998,"tid":40552,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Core\\Src\\main.c version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Core\\Src\\main.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Core\\\\Src\\\\main.c\""}},{"pid":0,"ph":"X","name":"getConfig","ts":996793.59999999998,"tid":54996,"dur":24.700000000069849,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/string.h"}},{"pid":0,"ph":"i","name":"Log","ts":997136.69999999995,"tid":7968,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":993105.19999999995,"tid":40552,"id":47,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":997331.59999999998,"tid":7968,"bp":"e","id":47,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":997634.09999999998,"tid":54996,"dur":292.59999999997672,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1000214.7,"tid":54996,"dur":83.200000000069849,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_flash.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1003760.6,"tid":54996,"dur":79,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/adc.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1004623.7,"tid":54996,"dur":18.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_tim_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1005895.2,"tid":54996,"dur":40.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/system_stm32f0xx.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1007822.4,"tid":54996,"dur":80.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1010208.7,"tid":54996,"dur":29.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_exti.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1012977.9,"tid":54996,"dur":26.799999999930151,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1018394.7,"tid":54996,"dur":30.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1020331.9,"tid":54996,"dur":54.299999999930151,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1021657,"tid":54996,"dur":36.300000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0/port.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1022466,"tid":54996,"dur":23.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1024887,"tid":54996,"dur":75.900000000023283,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/limits.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1025542,"tid":54996,"dur":16.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/errno.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1025898.1,"tid":54996,"dur":12.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1026748.5,"tid":54996,"dur":22.400000000023283,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/stdio.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1027786.8,"tid":54996,"dur":16.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-private.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1028251.7,"tid":54996,"dur":16.800000000046566,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/time.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1029062.6,"tid":54996,"dur":20.700000000069849,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/stdarg.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1029465.6,"tid":54996,"dur":15.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/errno-base.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1029817.4,"tid":54996,"dur":17.599999999976717,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-rtu.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1030295.7,"tid":54996,"dur":23.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-version.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1030868,"tid":54996,"dur":55.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-tcp.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1032072.8,"tid":54996,"dur":19.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_i2c.c"}},{"pid":0,"ph":"X","name":"Queued:Update","ts":985676.30000000005,"tid":47116,"dur":3.8999999999068677,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":984785.69999999995,"tid":47116,"id":48,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1042060.6,"tid":2860,"bp":"e","id":48,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":1042072.4,"tid":2860,"dur":30.799999999930151,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/freertos.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1042127.5,"tid":2860,"dur":8,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/freertos.c"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1042983.6,"tid":2860,"dur":202.30000000004657,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1043293.3,"tid":2860,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Core\\Src\\freertos.c version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Core\\Src\\freertos.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Core\\\\Src\\\\freertos.c\""}},{"pid":0,"ph":"X","name":"getConfig","ts":1043886.9,"tid":54996,"dur":20.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/i2c.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1044441,"tid":54996,"dur":18.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c"}},{"pid":0,"ph":"i","name":"Log","ts":1044637.4,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1044789,"tid":47116,"dur":144.30000000004657,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":1045475.3,"tid":47116,"dur":5.2999999999301508,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1044497.8,"tid":47116,"id":49,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1046211.1,"tid":38404,"bp":"e","id":49,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":1046217.8,"tid":38404,"dur":18.899999999906868,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/stm32f0xx_it.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1046253.8,"tid":38404,"dur":6.5,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/stm32f0xx_it.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1046933.3,"tid":54996,"dur":38.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/stream_buffer.h"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1046830.4,"tid":38404,"dur":173.69999999995343,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1047363.9,"tid":38404,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Core\\Src\\stm32f0xx_it.c version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Core\\Src\\stm32f0xx_it.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Core\\\\Src\\\\stm32f0xx_it.c\""}},{"pid":0,"ph":"X","name":"getConfig","ts":1049435.2,"tid":54996,"dur":21.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-st-rtu.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1050242.8999999999,"tid":54996,"dur":32.400000000139698,"args":{"path":"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include/assert.h"}},{"pid":0,"ph":"i","name":"Log","ts":1050678.8999999999,"tid":45596,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"X","name":"getConfig","ts":1050694.3,"tid":54996,"dur":13.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/Module_driver/uart_device.h"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1046203.3,"tid":38404,"id":50,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1050808.8999999999,"tid":45596,"bp":"e","id":50,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":1050998.3999999999,"tid":54996,"dur":10.900000000139698,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-rtu-private.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1051283.2,"tid":54996,"dur":16.100000000093132,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1057876.8999999999,"tid":54996,"dur":116,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1058458.3,"tid":54996,"dur":13.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/tasks.c"}},{"pid":0,"ph":"i","name":"Log","ts":1070964.3999999999,"tid":37816,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1042049.1,"tid":2860,"id":51,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1071356.7,"tid":37816,"bp":"e","id":51,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":1076535.7,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1076636.8,"tid":47116,"dur":50.300000000046566,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":1077080.3999999999,"tid":47116,"dur":4.1000000000931323,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1076483.2,"tid":47116,"id":52,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1077760.6000000001,"tid":20008,"bp":"e","id":52,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":1080322.8999999999,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1080442.3,"tid":47116,"dur":35.300000000046566,"args":{}},{"pid":0,"ph":"X","name":"getConfig","ts":1082151.1000000001,"tid":54996,"dur":31.099999999860302,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/include/stack_macros.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1077767.3999999999,"tid":20008,"dur":5754.3000000000466,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1083591.5,"tid":20008,"dur":17.399999999906868,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1083928.2,"tid":20008,"dur":180.60000000009313,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1084180.8,"tid":20008,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_hal_iwdg.h version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -x c-header -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Drivers\\\\STM32F0xx_HAL_Driver\\\\Inc\\\\stm32f0xx_hal_iwdg.h\""}},{"pid":0,"ph":"i","name":"Log","ts":1089301.7,"tid":9212,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1077749.3,"tid":20008,"id":53,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1089544.1000000001,"tid":9212,"bp":"e","id":53,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":1092954.6000000001,"tid":47116,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1093069.5,"tid":47116,"dur":29.800000000046566,"args":{}},{"pid":0,"ph":"X","name":"getConfig","ts":1132529.8,"tid":54996,"dur":55.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_i2c_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1133156.2,"tid":54996,"dur":19.600000000093132,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/freertos.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1134511.8999999999,"tid":54996,"dur":35.5,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1137151.2,"tid":54996,"dur":34.199999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/libmodbus/modbus-data.c"}},{"pid":0,"ph":"X","name":"Queued:Update","ts":1080664,"tid":47116,"dur":2.3999999999068677,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1080291.3999999999,"tid":47116,"id":54,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1137556.2,"tid":33840,"bp":"e","id":54,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":1137561.8999999999,"tid":33840,"dur":15.800000000046566,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_iwdg.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1137926.5,"tid":54996,"dur":12.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/Middlewares/Third_Party/FreeRTOS/Source/list.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1139124.8,"tid":54996,"dur":217,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/Module_driver/uart_device.c"}},{"pid":0,"ph":"i","name":"Log","ts":1140181.6000000001,"tid":47116,"args":{"Message":"<-- reply(0)"}},{"pid":0,"ph":"i","name":"Log","ts":1140269.7,"tid":47116,"args":{"Message":"--> $/progress"}},{"pid":0,"ph":"i","name":"Log","ts":1140323.5,"tid":47116,"args":{"Message":"--> $/progress"}},{"pid":0,"ph":"X","name":"Queued:Update","ts":1093337.7,"tid":47116,"dur":3.5,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1092902.3,"tid":47116,"id":55,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1142973.3,"tid":50224,"bp":"e","id":55,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":1142982,"tid":50224,"dur":474.10000000009313,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_iwdg.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1149961.2,"tid":50224,"dur":32,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_iwdg.c"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1150363.7,"tid":50224,"dur":170.5,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1150659.2,"tid":50224,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_iwdg.c version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Drivers\\\\STM32F0xx_HAL_Driver\\\\Src\\\\stm32f0xx_hal_iwdg.c\""}},{"pid":0,"ph":"i","name":"Log","ts":1157768.6000000001,"tid":39708,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1142963.8999999999,"tid":50224,"id":56,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1158070.2,"tid":39708,"bp":"e","id":56,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":1161996.2,"tid":54996,"dur":34.400000000139698,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_gpio.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1163184.3999999999,"tid":54996,"dur":19,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Src/stm32f0xx_it.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1163610.3,"tid":54996,"dur":16.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Core/Inc/stm32f0xx_it.h"}},{"pid":0,"ph":"X","name":"getConfig","ts":1163980,"tid":54996,"dur":15.100000000093132,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1164434.8,"tid":54996,"dur":10.699999999953434,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_flash_ex.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1165689.5,"tid":54996,"dur":155.89999999990687,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_tim.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1166612.1000000001,"tid":54996,"dur":21.399999999906868,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c"}},{"pid":0,"ph":"X","name":"getConfig","ts":1166609,"tid":33840,"dur":24.899999999906868,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_iwdg.h"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1166938.3999999999,"tid":33840,"dur":203.10000000009313,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1167204.2,"tid":33840,"args":{"Message":"ASTWorker building file g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_ll_iwdg.h version 1 with command inferred from G:\\QianSai\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal.c\n[G:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/1]\n\"D:\\\\Cadence SPB 23.1\\\\SPB_Data\\\\.vcpkg\\\\artifacts\\\\2139c4c6\\\\compilers.arm.armclang\\\\6.24.0\\\\bin\\\\armclang.exe\" --target=arm-arm-none-eabi -DSTM32F030xC -DUSE_HAL_DRIVER -D_RTE_ -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Core/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/STM32F0xx_HAL_Driver/Inc/Legacy -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Device/ST/STM32F0xx/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/CMSIS/Include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/include -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM0 -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Drivers/Module_driver -IG:/QianSai/Modbus_f030/demo/MDK-ARM/../Middlewares/Third_Party/libmodbus -IG:/QianSai/Modbus_f030/demo/MDK-ARM/tmp/demo+demo -IG:/QianSai/Modbus_f030/demo/MDK-ARM/RTE/_demo -IC:/Users/27622/AppData/Local/arm/packs/ARM/CMSIS/6.1.0/CMSIS/Core/Include -isystem \"D:/Cadence SPB 23.1/SPB_Data/.vcpkg/artifacts/2139c4c6/compilers.arm.armclang/6.24.0/include\" --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -mcpu=Cortex-M0 -mfpu=none --target=arm-arm-none-eabi -c -mlittle-endian -fno-rtti -funsigned-char -fshort-enums -fshort-wchar -ffunction-sections -Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -g -O1 -c -x c-header -std=c99 \"-resource-dir=C:\\\\Users\\\\27622\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\llvm-vs-code-extensions.vscode-clangd\\\\install\\\\18.1.3\\\\clangd_18.1.3\\\\lib\\\\clang\\\\18\" -- \"g:\\\\1\\\\Modbus_f030\\\\demo\\\\Drivers\\\\STM32F0xx_HAL_Driver\\\\Inc\\\\stm32f0xx_ll_iwdg.h\""}},{"pid":0,"ph":"X","name":"getConfig","ts":1171443.1000000001,"tid":54996,"dur":35,"args":{"path":"G:/QianSai/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc_ex.c"}},{"pid":0,"ph":"i","name":"Log","ts":1203117.8999999999,"tid":41472,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":1137545.3999999999,"tid":33840,"id":57,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":1203352.8999999999,"tid":41472,"bp":"e","id":57,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"RebuildBackgroundIndex","ts":1172501.3999999999,"tid":54996,"dur":83605.5,"args":{"reason":"after loading index from disk"}},{"pid":0,"ph":"i","name":"Log","ts":1293365.2,"tid":50808,"args":{"Message":"Built preamble of size 349848 for file g:\\1\\Modbus_f030\\demo\\Core\\Inc\\stm32f0xx_hal_conf.h version 1 in 0.38 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":1293493.5,"tid":50808,"dur":1493.3000000000466,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":911909.40000000002,"tid":50808,"dur":383110.40000000002,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Inc\\stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"i","name":"Log","ts":1295128.1000000001,"tid":50808,"args":{"Message":"--> workspace/semanticTokens/refresh(1)"}},{"pid":0,"ph":"X","name":"getConfig","ts":1295274.3999999999,"tid":51204,"dur":22.800000000046566,"args":{"path":"g:/1/Modbus_f030/demo/Core/Inc/stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"i","name":"Log","ts":1297084.5,"tid":17976,"args":{"Message":"Indexing c99 standard library in the context of g:\\1\\Modbus_f030\\demo\\Core\\Inc\\stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":1297362.7,"tid":52380,"dur":588.5,"args":{}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":1295994.8999999999,"tid":51204,"dur":7390.8000000000466,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Inc\\stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":1304598.8999999999,"tid":51204,"dur":5179.9000000001397,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":1312487,"tid":51204,"dur":16535.600000000093,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1396360.2,"tid":54996,"args":{"Message":"--> $/progress"}},{"pid":0,"ph":"i","name":"Log","ts":1396459.3999999999,"tid":12856,"args":{"Message":"--> $/progress"}},{"pid":0,"ph":"X","name":"BackgroundIndexEnqueue","ts":918684.69999999995,"tid":54996,"dur":477792.80000000005,"args":{"files":44}},{"pid":0,"ph":"i","name":"Log","ts":1396636.5,"tid":54996,"args":{"Message":"--> $/progress"}},{"pid":0,"ph":"X","name":"getConfig","ts":1401819.8,"tid":12856,"dur":368.5999999998603,"args":{"path":"G:/QianSai/Modbus_f030/demo/MDK-ARM/startup_stm32f030xc.s"}},{"pid":0,"ph":"X","name":"getConfig","ts":1402539.3,"tid":12856,"dur":98.800000000046566,"args":{"path":"G:/QianSai/Modbus_f030/demo/MDK-ARM/startup_stm32f030xc.s"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":1402707.7,"tid":12856,"dur":193.30000000004657,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1413390.2,"tid":7968,"args":{"Message":"Built preamble of size 1700988 for file g:\\1\\Modbus_f030\\demo\\Core\\Src\\main.c version 1 in 0.41 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":1413453.2,"tid":7968,"dur":107.9000000001397,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":997313.90000000002,"tid":7968,"dur":416262.79999999993,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\main.c"}},{"pid":0,"ph":"i","name":"Log","ts":1413681.1000000001,"tid":7968,"args":{"Message":"--> workspace/semanticTokens/refresh(2)"}},{"pid":0,"ph":"X","name":"getConfig","ts":1413747,"tid":40552,"dur":18.300000000046566,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/main.c"}},{"pid":0,"ph":"X","name":"BackgroundIndex","ts":1402912.2,"tid":12856,"dur":11447.199999999953,"args":{"file":"G:\\QianSai\\Modbus_f030\\demo\\MDK-ARM\\startup_stm32f030xc.s"}},{"pid":0,"ph":"i","name":"Log","ts":1414391.8999999999,"tid":12856,"args":{"Message":"Indexing G:\\QianSai\\Modbus_f030\\demo\\MDK-ARM\\startup_stm32f030xc.s failed: Couldn't build compiler invocation"}},{"pid":0,"ph":"i","name":"Log","ts":1414552.8999999999,"tid":12856,"args":{"Message":"--> $/progress"}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":1417797.5,"tid":40552,"dur":7725.1000000000931,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\main.c"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":1426797.8999999999,"tid":40552,"dur":2445.7000000001863,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":1432518.6000000001,"tid":40552,"dur":4019.5,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":1443341.5,"tid":40552,"dur":889.10000000009313,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":1445512.3,"tid":40552,"dur":20,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":1445098.3,"tid":40552,"dur":457.0999999998603,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":1445581,"tid":40552,"dur":2059.5,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":1413801.7,"tid":40552,"dur":34130.100000000093,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\main.c"}},{"pid":0,"ph":"i","name":"Log","ts":1451060.6000000001,"tid":40552,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":1451176,"tid":40552,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":1451216.1000000001,"tid":40552,"dur":360.79999999981374,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":1447960.1000000001,"tid":40552,"dur":3633.7999999998137,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":1413742.8,"tid":40552,"dur":37883.800000000047,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1451656.1000000001,"tid":40552,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":1480642.2,"tid":17976,"args":{"Message":"Indexed c99 standard library: 1349 symbols, 2 filtered"}},{"pid":0,"ph":"X","name":"StandardLibraryIndex","ts":1297073.3,"tid":17976,"dur":184633.5,"args":{"symbols":1349}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":1485373.2,"tid":51204,"dur":11.900000000139698,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":1487648.1000000001,"tid":51204,"dur":34.899999999906868,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":1487500.6000000001,"tid":51204,"dur":221.5,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":1487747.8999999999,"tid":51204,"dur":8510.8000000000466,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":1295361.7,"tid":51204,"dur":201305.19999999995,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Inc\\stm32f0xx_hal_conf.h"}},{"pid":0,"ph":"i","name":"Log","ts":1498525.7,"tid":51204,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":1499140.3,"tid":51204,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":1499308.1000000001,"tid":51204,"dur":8.5999999998603016,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":1496739.1000000001,"tid":51204,"dur":2590.0999999998603,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":1295270.3999999999,"tid":51204,"dur":204086.30000000005,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1499380.8,"tid":51204,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":1511171.3999999999,"tid":47116,"args":{"Message":"<-- reply(1)"}},{"pid":0,"ph":"X","name":"Update","ts":898003.69999999995,"tid":51204,"dur":397249.40000000014,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":897130.90000000002,"tid":47116,"dur":728.19999999995343,"args":{"Params":{"textDocument":{"languageId":"cpp","text":"/* USER CODE BEGIN Header */\r\n/**\r\n  ******************************************************************************\r\n  * @file    stm32f0xx_hal_conf.h\r\n  * @brief   HAL configuration file.\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * Copyright (c) 2016 STMicroelectronics.\r\n  * All rights reserved.\r\n  *\r\n  * This software is licensed under terms that can be found in the LICENSE file\r\n  * in the root directory of this software component.\r\n  * If no LICENSE file comes with this software, it is provided AS-IS.\r\n  *\r\n  ******************************************************************************\r\n  */\r\n/* USER CODE END Header */\r\n\r\n/* Define to prevent recursive inclusion -------------------------------------*/\r\n#ifndef __STM32F0xx_HAL_CONF_H\r\n#define __STM32F0xx_HAL_CONF_H\r\n\r\n#ifdef __cplusplus\r\n extern \"C\" {\r\n#endif\r\n\r\n/* Exported types ------------------------------------------------------------*/\r\n/* Exported constants --------------------------------------------------------*/\r\n\r\n/* ########################## Module Selection ############################## */\r\n/**\r\n  * @brief This is the list of modules to be used in the HAL driver\r\n  */\r\n#define HAL_MODULE_ENABLED\r\n  #define HAL_ADC_MODULE_ENABLED\r\n/*#define HAL_CRYP_MODULE_ENABLED   */\r\n/*#define HAL_CAN_MODULE_ENABLED   */\r\n/*#define HAL_CEC_MODULE_ENABLED   */\r\n/*#define HAL_COMP_MODULE_ENABLED   */\r\n/*#define HAL_CRC_MODULE_ENABLED   */\r\n/*#define HAL_CRYP_MODULE_ENABLED   */\r\n/*#define HAL_TSC_MODULE_ENABLED   */\r\n/*#define HAL_DAC_MODULE_ENABLED   */\r\n/*#define HAL_I2S_MODULE_ENABLED   */\r\n#define HAL_IWDG_MODULE_ENABLED\r\n/*#define HAL_LCD_MODULE_ENABLED   */\r\n/*#define HAL_LPTIM_MODULE_ENABLED   */\r\n/*#define HAL_RNG_MODULE_ENABLED   */\r\n/*#define HAL_RTC_MODULE_ENABLED   */\r\n/*#define HAL_SPI_MODULE_ENABLED   */\r\n#define HAL_TIM_MODULE_ENABLED\r\n#define HAL_UART_MODULE_ENABLED\r\n/*#define HAL_USART_MODULE_ENABLED   */\r\n/*#define HAL_IRDA_MODULE_ENABLED   */\r\n/*#define HAL_SMARTCARD_MODULE_ENABLED   */\r\n/*#define HAL_SMBUS_MODULE_ENABLED   */\r\n/*#define HAL_WWDG_MODULE_ENABLED   */\r\n/*#define HAL_PCD_MODULE_ENABLED   */\r\n#define HAL_CORTEX_MODULE_ENABLED\r\n#define HAL_DMA_MODULE_ENABLED\r\n#define HAL_FLASH_MODULE_ENABLED\r\n#define HAL_GPIO_MODULE_ENABLED\r\n#define HAL_EXTI_MODULE_ENABLED\r\n#define HAL_PWR_MODULE_ENABLED\r\n#define HAL_RCC_MODULE_ENABLED\r\n#define HAL_I2C_MODULE_ENABLED\r\n\r\n/* ########################## HSE/HSI Values adaptation ##################### */\r\n/**\r\n  * @brief Adjust the value of External High Speed oscillator (HSE) used in your application.\r\n  *        This value is used by the RCC HAL module to compute the system frequency\r\n  *        (when HSE is used as system clock source, directly or through the PLL).\r\n  */\r\n#if !defined  (HSE_VALUE)\r\n  #define HSE_VALUE    ((uint32_t)8000000) /*!< Value of the External oscillator in Hz */\r\n#endif /* HSE_VALUE */\r\n\r\n/**\r\n  * @brief In the following line adjust the External High Speed oscillator (HSE) Startup\r\n  *        Timeout value\r\n  */\r\n#if !defined  (HSE_STARTUP_TIMEOUT)\r\n  #define HSE_STARTUP_TIMEOUT    ((uint32_t)100)   /*!< Time out for HSE start up, in ms */\r\n#endif /* HSE_STARTUP_TIMEOUT */\r\n\r\n/**\r\n  * @brief Internal High Speed oscillator (HSI) value.\r\n  *        This value is used by the RCC HAL module to compute the system frequency\r\n  *        (when HSI is used as system clock source, directly or through the PLL).\r\n  */\r\n#if !defined  (HSI_VALUE)\r\n  #define HSI_VALUE    ((uint32_t)8000000) /*!< Value of the Internal oscillator in Hz*/\r\n#endif /* HSI_VALUE */\r\n\r\n/**\r\n  * @brief In the following line adjust the Internal High Speed oscillator (HSI) Startup\r\n  *        Timeout value\r\n  */\r\n#if !defined  (HSI_STARTUP_TIMEOUT)\r\n #define HSI_STARTUP_TIMEOUT   ((uint32_t)5000) /*!< Time out for HSI start up */\r\n#endif /* HSI_STARTUP_TIMEOUT */\r\n\r\n/**\r\n  * @brief Internal High Speed oscillator for ADC (HSI14) value.\r\n  */\r\n#if !defined  (HSI14_VALUE)\r\n#define HSI14_VALUE ((uint32_t)14000000) /*!< Value of the Internal High Speed oscillator for ADC in Hz.\r\n                                             The real value may vary depending on the variations\r\n                                             in voltage and temperature.  */\r\n#endif /* HSI14_VALUE */\r\n\r\n/**\r\n  * @brief Internal High Speed oscillator for USB (HSI48) value.\r\n  */\r\n#if !defined  (HSI48_VALUE)\r\n  #define HSI48_VALUE ((uint32_t)48000000) /*!< Value of the Internal High Speed oscillator for USB in Hz.\r\n                                             The real value may vary depending on the variations\r\n                                             in voltage and temperature.  */\r\n#endif /* HSI48_VALUE */\r\n\r\n/**\r\n  * @brief Internal Low Speed oscillator (LSI) value.\r\n  */\r\n#if !defined  (LSI_VALUE)\r\n  #define LSI_VALUE  ((uint32_t)40000)\r\n#endif /* LSI_VALUE */                      /*!< Value of the Internal Low Speed oscillator in Hz\r\n                                             The real value may vary depending on the variations\r\n                                             in voltage and temperature.  */\r\n/**\r\n  * @brief External Low Speed oscillator (LSI) value.\r\n  */\r\n#if !defined  (LSE_VALUE)\r\n  #define LSE_VALUE  ((uint32_t)32768)    /*!< Value of the External Low Speed oscillator in Hz */\r\n#endif /* LSE_VALUE */\r\n\r\n/**\r\n  * @brief Time out for LSE start up value in ms.\r\n  */\r\n#if !defined  (LSE_STARTUP_TIMEOUT)\r\n  #define LSE_STARTUP_TIMEOUT    ((uint32_t)5000)   /*!< Time out for LSE start up, in ms */\r\n#endif /* LSE_STARTUP_TIMEOUT */\r\n\r\n/* Tip: To avoid modifying this file each time you need to use different HSE,\r\n   ===  you can define the HSE value in your toolchain compiler preprocessor. */\r\n\r\n/* ########################### System Configuration ######################### */\r\n/**\r\n  * @brief This is the HAL system configuration section\r\n  */\r\n#define  VDD_VALUE                    ((uint32_t)3300) /*!< Value of VDD in mv */\r\n#define  TICK_INT_PRIORITY            ((uint32_t)3)    /*!< tick interrupt priority (lowest by default)  */\r\n                                                                              /*  Warning: Must be set to higher priority for HAL_Delay()  */\r\n                                                                              /*  and HAL_GetTick() usage under interrupt context          */\r\n#define  USE_RTOS                     0\r\n#define  PREFETCH_ENABLE              1\r\n#define  INSTRUCTION_CACHE_ENABLE     0\r\n#define  DATA_CACHE_ENABLE            0\r\n#define  USE_SPI_CRC                     0U\r\n\r\n#define  USE_HAL_ADC_REGISTER_CALLBACKS         0U /* ADC register callback disabled       */\r\n#define  USE_HAL_CAN_REGISTER_CALLBACKS         0U /* CAN register callback disabled       */\r\n#define  USE_HAL_COMP_REGISTER_CALLBACKS        0U /* COMP register callback disabled      */\r\n#define  USE_HAL_CEC_REGISTER_CALLBACKS         0U /* CEC register callback disabled       */\r\n#define  USE_HAL_DAC_REGISTER_CALLBACKS         0U /* DAC register callback disabled       */\r\n#define  USE_HAL_I2C_REGISTER_CALLBACKS         0U /* I2C register callback disabled       */\r\n#define  USE_HAL_SMBUS_REGISTER_CALLBACKS       0U /* SMBUS register callback disabled     */\r\n#define  USE_HAL_UART_REGISTER_CALLBACKS        0U /* UART register callback disabled      */\r\n#define  USE_HAL_USART_REGISTER_CALLBACKS       0U /* USART register callback disabled     */\r\n#define  USE_HAL_IRDA_REGISTER_CALLBACKS        0U /* IRDA register callback disabled      */\r\n#define  USE_HAL_SMARTCARD_REGISTER_CALLBACKS   0U /* SMARTCARD register callback disabled */\r\n#define  USE_HAL_WWDG_REGISTER_CALLBACKS        0U /* WWDG register callback disabled      */\r\n#define  USE_HAL_RTC_REGISTER_CALLBACKS         0U /* RTC register callback disabled       */\r\n#define  USE_HAL_SPI_REGISTER_CALLBACKS         0U /* SPI register callback disabled       */\r\n#define  USE_HAL_I2S_REGISTER_CALLBACKS         0U /* I2S register callback disabled       */\r\n#define  USE_HAL_TIM_REGISTER_CALLBACKS         0U /* TIM register callback disabled       */\r\n#define  USE_HAL_TSC_REGISTER_CALLBACKS         0U /* TSC register callback disabled       */\r\n#define  USE_HAL_PCD_REGISTER_CALLBACKS         0U /* PCD register callback disabled       */\r\n\r\n/* ########################## Assert Selection ############################## */\r\n/**\r\n  * @brief Uncomment the line below to expanse the \"assert_param\" macro in the\r\n  *        HAL drivers code\r\n  */\r\n/* #define USE_FULL_ASSERT   1U */\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n/**\r\n  * @brief Include module's header file\r\n  */\r\n\r\n#ifdef HAL_RCC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_rcc.h\"\r\n#endif /* HAL_RCC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_GPIO_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_gpio.h\"\r\n#endif /* HAL_GPIO_MODULE_ENABLED */\r\n\r\n#ifdef HAL_EXTI_MODULE_ENABLED\r\n  #include \"stm32f0xx_hal_exti.h\"\r\n#endif /* HAL_EXTI_MODULE_ENABLED */\r\n\r\n#ifdef HAL_DMA_MODULE_ENABLED\r\n  #include \"stm32f0xx_hal_dma.h\"\r\n#endif /* HAL_DMA_MODULE_ENABLED */\r\n\r\n#ifdef HAL_CORTEX_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_cortex.h\"\r\n#endif /* HAL_CORTEX_MODULE_ENABLED */\r\n\r\n#ifdef HAL_ADC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_adc.h\"\r\n#endif /* HAL_ADC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_CAN_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_can.h\"\r\n#endif /* HAL_CAN_MODULE_ENABLED */\r\n\r\n#ifdef HAL_CEC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_cec.h\"\r\n#endif /* HAL_CEC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_COMP_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_comp.h\"\r\n#endif /* HAL_COMP_MODULE_ENABLED */\r\n\r\n#ifdef HAL_CRC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_crc.h\"\r\n#endif /* HAL_CRC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_DAC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_dac.h\"\r\n#endif /* HAL_DAC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_FLASH_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_flash.h\"\r\n#endif /* HAL_FLASH_MODULE_ENABLED */\r\n\r\n#ifdef HAL_I2C_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_i2c.h\"\r\n#endif /* HAL_I2C_MODULE_ENABLED */\r\n\r\n#ifdef HAL_I2S_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_i2s.h\"\r\n#endif /* HAL_I2S_MODULE_ENABLED */\r\n\r\n#ifdef HAL_IRDA_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_irda.h\"\r\n#endif /* HAL_IRDA_MODULE_ENABLED */\r\n\r\n#ifdef HAL_IWDG_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_iwdg.h\"\r\n#endif /* HAL_IWDG_MODULE_ENABLED */\r\n\r\n#ifdef HAL_PCD_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_pcd.h\"\r\n#endif /* HAL_PCD_MODULE_ENABLED */\r\n\r\n#ifdef HAL_PWR_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_pwr.h\"\r\n#endif /* HAL_PWR_MODULE_ENABLED */\r\n\r\n#ifdef HAL_RTC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_rtc.h\"\r\n#endif /* HAL_RTC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_SMARTCARD_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_smartcard.h\"\r\n#endif /* HAL_SMARTCARD_MODULE_ENABLED */\r\n\r\n#ifdef HAL_SMBUS_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_smbus.h\"\r\n#endif /* HAL_SMBUS_MODULE_ENABLED */\r\n\r\n#ifdef HAL_SPI_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_spi.h\"\r\n#endif /* HAL_SPI_MODULE_ENABLED */\r\n\r\n#ifdef HAL_TIM_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_tim.h\"\r\n#endif /* HAL_TIM_MODULE_ENABLED */\r\n\r\n#ifdef HAL_TSC_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_tsc.h\"\r\n#endif /* HAL_TSC_MODULE_ENABLED */\r\n\r\n#ifdef HAL_UART_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_uart.h\"\r\n#endif /* HAL_UART_MODULE_ENABLED */\r\n\r\n#ifdef HAL_USART_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_usart.h\"\r\n#endif /* HAL_USART_MODULE_ENABLED */\r\n\r\n#ifdef HAL_WWDG_MODULE_ENABLED\r\n #include \"stm32f0xx_hal_wwdg.h\"\r\n#endif /* HAL_WWDG_MODULE_ENABLED */\r\n\r\n/* Exported macro ------------------------------------------------------------*/\r\n#ifdef  USE_FULL_ASSERT\r\n/**\r\n  * @brief  The assert_param macro is used for function's parameters check.\r\n  * @param  expr If expr is false, it calls assert_failed function\r\n  *         which reports the name of the source file and the source\r\n  *         line number of the call that failed.\r\n  *         If expr is true, it returns no value.\r\n  * @retval None\r\n  */\r\n  #define assert_param(expr) ((expr) ? (void)0U : assert_failed((uint8_t *)__FILE__, __LINE__))\r\n/* Exported functions ------------------------------------------------------- */\r\n  void assert_failed(uint8_t* file, uint32_t line);\r\n#else\r\n  #define assert_param(expr) ((void)0U)\r\n#endif /* USE_FULL_ASSERT */\r\n\r\n#ifdef __cplusplus\r\n}\r\n#endif\r\n\r\n#endif /* __STM32F0xx_HAL_CONF_H */\r\n\r\n","uri":"file:///g%3A/1/Modbus_f030/demo/Core/Inc/stm32f0xx_hal_conf.h","version":1}}}},{"pid":0,"ph":"i","name":"Log","ts":1589151,"tid":45596,"args":{"Message":"Built preamble of size 1608460 for file g:\\1\\Modbus_f030\\demo\\Core\\Src\\stm32f0xx_it.c version 1 in 0.53 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":1589225.8,"tid":45596,"dur":122.0999999998603,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":1050794.8,"tid":45596,"dur":538576.09999999986,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\stm32f0xx_it.c"}},{"pid":0,"ph":"i","name":"Log","ts":1589473.8999999999,"tid":45596,"args":{"Message":"--> workspace/semanticTokens/refresh(3)"}},{"pid":0,"ph":"X","name":"getConfig","ts":1589551.1000000001,"tid":38404,"dur":25.099999999860302,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/stm32f0xx_it.c"}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":1593816.2,"tid":38404,"dur":7980.6000000000931,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\stm32f0xx_it.c"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":1603042.3999999999,"tid":38404,"dur":27.800000000046566,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":1605899.8999999999,"tid":38404,"dur":4444,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":1613716.5,"tid":38404,"dur":132.5,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":1614103.3999999999,"tid":38404,"dur":9.4000000001396984,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":1614008.6000000001,"tid":38404,"dur":116.29999999981374,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":1614137.7,"tid":38404,"dur":4215.9000000001397,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":1589615.2,"tid":38404,"dur":28971.40000000014,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\stm32f0xx_it.c"}},{"pid":0,"ph":"i","name":"Log","ts":1622067.3,"tid":38404,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":1622204.1000000001,"tid":38404,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":1622237.2,"tid":38404,"dur":144.80000000004657,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":1618611.3999999999,"tid":38404,"dur":3780.6000000000931,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":1589545.8999999999,"tid":38404,"dur":32877.5,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1622442.5,"tid":38404,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":1658014,"tid":9212,"args":{"Message":"Built preamble of size 349900 for file g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_hal_iwdg.h version 1 in 0.57 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":1658250.5,"tid":9212,"dur":157.39999999990687,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":1089523.7,"tid":9212,"dur":568905.40000000014,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"i","name":"Log","ts":1658669.8999999999,"tid":20008,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":1658674.8,"tid":9212,"args":{"Message":"--> workspace/semanticTokens/refresh(4)"}},{"pid":0,"ph":"X","name":"getConfig","ts":1658742.7,"tid":20008,"dur":21.300000000046566,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":1659770.8,"tid":20008,"dur":7771.8000000000466,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"i","name":"Log","ts":1668363.8999999999,"tid":47116,"args":{"Message":"<-- reply(2)"}},{"pid":0,"ph":"X","name":"Update","ts":993105.19999999995,"tid":40552,"dur":420621.19999999995,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":992451.5,"tid":47116,"dur":402.40000000002328,"args":{"Params":{"textDocument":{"languageId":"c","text":"/* USER CODE BEGIN Header */\r\n/**\r\n  ******************************************************************************\r\n  * @file           : main.c\r\n  * @brief          : Main program body\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * Copyright (c) 2024 STMicroelectronics.\r\n  * All rights reserved.\r\n  *\r\n  * This software is licensed under terms that can be found in the LICENSE file\r\n  * in the root directory of this software component.\r\n  * If no LICENSE file comes with this software, it is provided AS-IS.\r\n  *\r\n  ******************************************************************************\r\n  */\r\n/* USER CODE END Header */\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"main.h\"\r\n#include \"cmsis_os.h\"\r\n#include \"adc.h\"\r\n#include \"dma.h\"\r\n#include \"i2c.h\"\r\n#include \"iwdg.h\"\r\n#include \"tim.h\"\r\n#include \"usart.h\"\r\n#include \"gpio.h\"\r\n\r\n/* Private includes ----------------------------------------------------------*/\r\n/* USER CODE BEGIN Includes */\r\n\r\n/* USER CODE END Includes */\r\n\r\n/* Private typedef -----------------------------------------------------------*/\r\n/* USER CODE BEGIN PTD */\r\n\r\n/* USER CODE END PTD */\r\n\r\n/* Private define ------------------------------------------------------------*/\r\n/* USER CODE BEGIN PD */\r\n\r\n/* USER CODE END PD */\r\n\r\n/* Private macro -------------------------------------------------------------*/\r\n/* USER CODE BEGIN PM */\r\n\r\n/* USER CODE END PM */\r\n\r\n/* Private variables ---------------------------------------------------------*/\r\n\r\n/* USER CODE BEGIN PV */\r\n\r\n/* USER CODE END PV */\r\n\r\n/* Private function prototypes -----------------------------------------------*/\r\nvoid SystemClock_Config(void);\r\nvoid MX_FREERTOS_Init(void);\r\n/* USER CODE BEGIN PFP */\r\n\r\n/* USER CODE END PFP */\r\n\r\n/* Private user code ---------------------------------------------------------*/\r\n/* USER CODE BEGIN 0 */\r\n\r\n/* USER CODE END 0 */\r\n\r\n/**\r\n  * @brief  The application entry point.\r\n  * @retval int\r\n  */\r\nint main(void)\r\n{\r\n  /* USER CODE BEGIN 1 */\t\r\n  //  extern void Start_DMA_Reception(void);\r\n  /* USER CODE END 1 */\r\n\r\n  /* MCU Configuration--------------------------------------------------------*/\r\n\r\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\r\n  HAL_Init();\r\n\r\n  /* USER CODE BEGIN Init */\r\n\r\n  /* USER CODE END Init */\r\n\r\n  /* Configure the system clock */\r\n  SystemClock_Config();\r\n\r\n  /* USER CODE BEGIN SysInit */\r\n\r\n  /* USER CODE END SysInit */\r\n\r\n  /* Initialize all configured peripherals */\r\n  MX_GPIO_Init();\r\n  MX_DMA_Init();\r\n  MX_USART1_UART_Init();\r\n  MX_ADC_Init();\r\n  MX_I2C1_Init();\r\n\t// MX_USART5_UART_Init();\r\n  MX_TIM3_Init();\r\n  MX_IWDG_Init();\r\n  /* USER CODE BEGIN 2 */\r\n    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // beep1\r\n\r\n  //  Start_DMA_Reception();\r\n  /* USER CODE END 2 */\r\n\r\n  /* Init scheduler */\r\n  osKernelInitialize();\r\n\r\n  /* Call init function for freertos objects (in freertos.c) */\r\n  MX_FREERTOS_Init();\r\n\r\n  /* Start scheduler */\r\n  osKernelStart();\r\n\r\n  /* We should never get here as control is now taken by the scheduler */\r\n  /* Infinite loop */\r\n  /* USER CODE BEGIN WHILE */\r\n    while (1)\r\n    {\r\n    /* USER CODE END WHILE */\r\n\r\n    /* USER CODE BEGIN 3 */\r\n        //\t\t/* set LED output high */\r\n        //    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); //LED1\r\n        //    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //LED2\r\n        //    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); //LED3\r\n        //    HAL_Delay(500);\r\n\r\n        //\t\t/* set LED output low */\r\n        //    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);//LED1\r\n        //    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //LED2\r\n        //    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); //LED3\r\n        //    HAL_Delay(500);\r\n    }\r\n  /* USER CODE END 3 */\r\n}\r\n\r\n/**\r\n  * @brief System Clock Configuration\r\n  * @retval None\r\n  */\r\nvoid SystemClock_Config(void)\r\n{\r\n  RCC_OscInitTypeDef RCC_OscInitStruct = {0};\r\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\r\n  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};\r\n\r\n  /** Initializes the RCC Oscillators according to the specified parameters\r\n  * in the RCC_OscInitTypeDef structure.\r\n  */\r\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14\r\n                              |RCC_OSCILLATORTYPE_LSI;\r\n  RCC_OscInitStruct.HSIState = RCC_HSI_ON;\r\n  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;\r\n  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\r\n  RCC_OscInitStruct.HSI14CalibrationValue = 16;\r\n  RCC_OscInitStruct.LSIState = RCC_LSI_ON;\r\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\r\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\r\n  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;\r\n  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;\r\n  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n\r\n  /** Initializes the CPU, AHB and APB buses clocks\r\n  */\r\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\r\n                              |RCC_CLOCKTYPE_PCLK1;\r\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\r\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\r\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;\r\n\r\n  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;\r\n  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;\r\n  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;\r\n  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n}\r\n\r\n/* USER CODE BEGIN 4 */\r\n\r\n/* USER CODE END 4 */\r\n\r\n/**\r\n  * @brief  Period elapsed callback in non blocking mode\r\n  * @note   This function is called  when TIM16 interrupt took place, inside\r\n  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment\r\n  * a global variable \"uwTick\" used as application time base.\r\n  * @param  htim : TIM handle\r\n  * @retval None\r\n  */\r\nvoid HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)\r\n{\r\n  /* USER CODE BEGIN Callback 0 */\r\n\r\n  /* USER CODE END Callback 0 */\r\n  if (htim->Instance == TIM16) {\r\n    HAL_IncTick();\r\n  }\r\n  /* USER CODE BEGIN Callback 1 */\r\n\r\n  /* USER CODE END Callback 1 */\r\n}\r\n\r\n/**\r\n  * @brief  This function is executed in case of error occurrence.\r\n  * @retval None\r\n  */\r\nvoid Error_Handler(void)\r\n{\r\n  /* USER CODE BEGIN Error_Handler_Debug */\r\n    /* User can add his own implementation to report the HAL error return state */\r\n    __disable_irq();\r\n    while (1)\r\n    {\r\n    }\r\n  /* USER CODE END Error_Handler_Debug */\r\n}\r\n\r\n#ifdef  USE_FULL_ASSERT\r\n/**\r\n  * @brief  Reports the name of the source file and the source line number\r\n  *         where the assert_param error has occurred.\r\n  * @param  file: pointer to the source file name\r\n  * @param  line: assert_param error line source number\r\n  * @retval None\r\n  */\r\nvoid assert_failed(uint8_t *file, uint32_t line)\r\n{\r\n  /* USER CODE BEGIN 6 */\r\n    /* User can add his own implementation to report the file name and line number,\r\n     ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\r\n  /* USER CODE END 6 */\r\n}\r\n#endif /* USE_FULL_ASSERT */\r\n","uri":"file:///g%3A/1/Modbus_f030/demo/Core/Src/main.c","version":1}}}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":1668862.3999999999,"tid":20008,"dur":1451.5,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":1672290.1000000001,"tid":20008,"dur":6535.5,"args":{}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":1729326,"tid":26748,"dur":78298.899999999907,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1844758.5,"tid":39708,"args":{"Message":"Built preamble of size 1613656 for file g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_iwdg.c version 1 in 0.68 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":1845367.6000000001,"tid":39708,"dur":109.69999999995343,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":1158050.3999999999,"tid":39708,"dur":687449.20000000019,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_iwdg.c"}},{"pid":0,"ph":"i","name":"Log","ts":1845642.7,"tid":50224,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"X","name":"getConfig","ts":1845694.1000000001,"tid":50224,"dur":16.799999999813735,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_iwdg.c"}},{"pid":0,"ph":"i","name":"Log","ts":1845741.3,"tid":50224,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":1845899.3999999999,"tid":39708,"args":{"Message":"--> workspace/semanticTokens/refresh(5)"}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":1846668.7,"tid":50224,"dur":7288.1999999999534,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_iwdg.c"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":1855102.5,"tid":50224,"dur":443,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":1858381,"tid":50224,"dur":4270.6000000000931,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":1869474,"tid":50224,"dur":655,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":1871505.3,"tid":50224,"dur":2.5,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":1871259.5,"tid":50224,"dur":274.10000000009313,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":1871552.2,"tid":50224,"dur":2147.9000000001397,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":1845766.1000000001,"tid":50224,"dur":28158.899999999907,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_iwdg.c"}},{"pid":0,"ph":"i","name":"Log","ts":1875316.8999999999,"tid":50224,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":1875387.8999999999,"tid":50224,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":1875415,"tid":50224,"dur":174.89999999990687,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":1873946.7,"tid":50224,"dur":1652.1999999999534,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":1845691.8999999999,"tid":50224,"dur":30552.40000000014,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1876269.8999999999,"tid":50224,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":1414601.8,"tid":42176,"dur":493606.30000000005,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":1939313.3999999999,"tid":20008,"dur":56.900000000139698,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":1942666,"tid":20008,"dur":1.6999999999534339,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":1942490.2,"tid":20008,"dur":203.80000000004657,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1946998.5,"tid":41472,"args":{"Message":"Built preamble of size 349892 for file g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_ll_iwdg.h version 1 in 0.74 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":1947068.7,"tid":41472,"dur":105.9000000001397,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":1203306.7,"tid":41472,"dur":743882,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_ll_iwdg.h"}},{"pid":0,"ph":"i","name":"Log","ts":1947303,"tid":41472,"args":{"Message":"--> workspace/semanticTokens/refresh(6)"}},{"pid":0,"ph":"X","name":"getConfig","ts":1947377.5,"tid":33840,"dur":21.5,"args":{"path":"g:/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_iwdg.h"}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":1942709.8,"tid":20008,"dur":10709.699999999953,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":1658822,"tid":20008,"dur":294830.69999999995,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_hal_iwdg.h"}},{"pid":0,"ph":"i","name":"Log","ts":1955901.2,"tid":20008,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":1956180.3,"tid":20008,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":1956301.5,"tid":20008,"dur":686.30000000004657,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":1953673.6000000001,"tid":20008,"dur":3332.2999999998137,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":1658738.3999999999,"tid":20008,"dur":303747.5,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":1962587.7,"tid":20008,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":1967504.2,"tid":47116,"args":{"Message":"<-- reply(3)"}},{"pid":0,"ph":"X","name":"Update","ts":1046203.3,"tid":38404,"dur":543322.30000000005,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":1044497.8,"tid":47116,"dur":999.5,"args":{"Params":{"textDocument":{"languageId":"c","text":"/* USER CODE BEGIN Header */\r\n/**\r\n  ******************************************************************************\r\n  * @file    stm32f0xx_it.c\r\n  * @brief   Interrupt Service Routines.\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * Copyright (c) 2024 STMicroelectronics.\r\n  * All rights reserved.\r\n  *\r\n  * This software is licensed under terms that can be found in the LICENSE file\r\n  * in the root directory of this software component.\r\n  * If no LICENSE file comes with this software, it is provided AS-IS.\r\n  *\r\n  ******************************************************************************\r\n  */\r\n/* USER CODE END Header */\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"main.h\"\r\n#include \"stm32f0xx_it.h\"\r\n/* Private includes ----------------------------------------------------------*/\r\n/* USER CODE BEGIN Includes */\r\n/* USER CODE END Includes */\r\n\r\n/* Private typedef -----------------------------------------------------------*/\r\n/* USER CODE BEGIN TD */\r\n\r\n/* USER CODE END TD */\r\n\r\n/* Private define ------------------------------------------------------------*/\r\n/* USER CODE BEGIN PD */\r\n\r\n/* USER CODE END PD */\r\n\r\n/* Private macro -------------------------------------------------------------*/\r\n/* USER CODE BEGIN PM */\r\n\r\n/* USER CODE END PM */\r\n\r\n/* Private variables ---------------------------------------------------------*/\r\n/* USER CODE BEGIN PV */\r\n\r\n/* USER CODE END PV */\r\n\r\n/* Private function prototypes -----------------------------------------------*/\r\n/* USER CODE BEGIN PFP */\r\n\r\n/* USER CODE END PFP */\r\n\r\n/* Private user code ---------------------------------------------------------*/\r\n/* USER CODE BEGIN 0 */\r\n\r\n/* USER CODE END 0 */\r\n\r\n/* External variables --------------------------------------------------------*/\r\nextern DMA_HandleTypeDef hdma_usart5_rx;\r\nextern UART_HandleTypeDef huart1;\r\nextern UART_HandleTypeDef huart5;\r\nextern TIM_HandleTypeDef htim16;\r\n\r\n/* USER CODE BEGIN EV */\r\n\r\n/* USER CODE END EV */\r\n\r\n/******************************************************************************/\r\n/*           Cortex-M0 Processor Interruption and Exception Handlers          */\r\n/******************************************************************************/\r\n/**\r\n  * @brief This function handles Non maskable interrupt.\r\n  */\r\nvoid NMI_Handler(void)\r\n{\r\n  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */\r\n\r\n  /* USER CODE END NonMaskableInt_IRQn 0 */\r\n  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */\r\n    while (1)\r\n    {\r\n    }\r\n  /* USER CODE END NonMaskableInt_IRQn 1 */\r\n}\r\n\r\n/**\r\n  * @brief This function handles Hard fault interrupt.\r\n  */\r\nvoid HardFault_Handler(void)\r\n{\r\n  /* USER CODE BEGIN HardFault_IRQn 0 */\r\n\r\n  /* USER CODE END HardFault_IRQn 0 */\r\n  while (1)\r\n  {\r\n    /* USER CODE BEGIN W1_HardFault_IRQn 0 */\r\n    /* USER CODE END W1_HardFault_IRQn 0 */\r\n  }\r\n}\r\n\r\n/******************************************************************************/\r\n/* STM32F0xx Peripheral Interrupt Handlers                                    */\r\n/* Add here the Interrupt Handlers for the used peripherals.                  */\r\n/* For the available peripheral interrupt handler names,                      */\r\n/* please refer to the startup file (startup_stm32f0xx.s).                    */\r\n/******************************************************************************/\r\n\r\n/**\r\n  * @brief This function handles DMA1 channel 1 interrupt.\r\n  */\r\nvoid DMA1_Channel1_IRQHandler(void)\r\n{\r\n  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */\r\n\r\n  /* USER CODE END DMA1_Channel1_IRQn 0 */\r\n  HAL_DMA_IRQHandler(&hdma_usart5_rx);\r\n  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */\r\n\r\n  /* USER CODE END DMA1_Channel1_IRQn 1 */\r\n}\r\n\r\n/**\r\n  * @brief This function handles TIM16 global interrupt.\r\n  */\r\nvoid TIM16_IRQHandler(void)\r\n{\r\n  /* USER CODE BEGIN TIM16_IRQn 0 */\r\n\r\n  /* USER CODE END TIM16_IRQn 0 */\r\n  HAL_TIM_IRQHandler(&htim16);\r\n  /* USER CODE BEGIN TIM16_IRQn 1 */\r\n\r\n  /* USER CODE END TIM16_IRQn 1 */\r\n}\r\n\r\n/**\r\n  * @brief This function handles USART1 global interrupt.\r\n  */\r\nvoid USART1_IRQHandler(void)\r\n{\r\n  /* USER CODE BEGIN USART1_IRQn 0 */\r\n\r\n  /* USER CODE END USART1_IRQn 0 */\r\n  HAL_UART_IRQHandler(&huart1);\r\n  /* USER CODE BEGIN USART1_IRQn 1 */\r\n\r\n  /* USER CODE END USART1_IRQn 1 */\r\n}\r\n\r\n/**\r\n  * @brief This function handles USART3 to USART6 global interrupts.\r\n  */\r\nvoid USART3_6_IRQHandler(void)\r\n{\r\n  /* USER CODE BEGIN USART3_6_IRQn 0 */\r\n  //  extern void Handle_UART_Idle(UART_HandleTypeDef * huart);\r\n\r\n  //  if (__HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE))\r\n  //  {\r\n  //      Handle_UART_Idle(&huart5);\r\n  //      __HAL_UART_CLEAR_IDLEFLAG(&huart5);\r\n  //  }\r\n  /* USER CODE END USART3_6_IRQn 0 */\r\n  HAL_UART_IRQHandler(&huart5);\r\n  /* USER CODE BEGIN USART3_6_IRQn 1 */\r\n\r\n  /* USER CODE END USART3_6_IRQn 1 */\r\n}\r\n\r\n/* USER CODE BEGIN 1 */\r\n\r\n/* USER CODE END 1 */\r\n","uri":"file:///g%3A/1/Modbus_f030/demo/Core/Src/stm32f0xx_it.c","version":1}}}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":1964005.8,"tid":33840,"dur":8297.6999999999534,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_ll_iwdg.h"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":1973547.1000000001,"tid":33840,"dur":214.19999999995343,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":1975832.8999999999,"tid":33840,"dur":7797.2000000001863,"args":{}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":1590042.5,"tid":22984,"dur":440797.80000000005,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":2054630.8,"tid":47116,"args":{"Message":"<-- reply(4)"}},{"pid":0,"ph":"X","name":"Update","ts":1077749.3,"tid":20008,"dur":580870.19999999995,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":1076483.2,"tid":47116,"dur":746.9000000001397,"args":{"Params":{"textDocument":{"languageId":"cpp","text":"/**\r\n  ******************************************************************************\r\n  * @file    stm32f0xx_hal_iwdg.h\r\n  * @author  MCD Application Team\r\n  * @brief   Header file of IWDG HAL module.\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * Copyright (c) 2016 STMicroelectronics.\r\n  * All rights reserved.\r\n  *\r\n  * This software is licensed under terms that can be found in the LICENSE file\r\n  * in the root directory of this software component.\r\n  * If no LICENSE file comes with this software, it is provided AS-IS.\r\n  *\r\n  ******************************************************************************\r\n  */\r\n\r\n/* Define to prevent recursive inclusion -------------------------------------*/\r\n#ifndef STM32F0xx_HAL_IWDG_H\r\n#define STM32F0xx_HAL_IWDG_H\r\n\r\n#ifdef __cplusplus\r\nextern \"C\" {\r\n#endif\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"stm32f0xx_hal_def.h\"\r\n\r\n/** @addtogroup STM32F0xx_HAL_Driver\r\n  * @{\r\n  */\r\n\r\n/** @defgroup IWDG IWDG\r\n  * @{\r\n  */\r\n\r\n/* Exported types ------------------------------------------------------------*/\r\n/** @defgroup IWDG_Exported_Types IWDG Exported Types\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  IWDG Init structure definition\r\n  */\r\ntypedef struct\r\n{\r\n  uint32_t Prescaler;  /*!< Select the prescaler of the IWDG.\r\n                            This parameter can be a value of @ref IWDG_Prescaler */\r\n\r\n  uint32_t Reload;     /*!< Specifies the IWDG down-counter reload value.\r\n                            This parameter must be a number between Min_Data = 0 and Max_Data = 0x0FFF */\r\n\r\n  uint32_t Window;     /*!< Specifies the window value to be compared to the down-counter.\r\n                            This parameter must be a number between Min_Data = 0 and Max_Data = 0x0FFF */\r\n\r\n} IWDG_InitTypeDef;\r\n\r\n/**\r\n  * @brief  IWDG Handle Structure definition\r\n  */\r\ntypedef struct\r\n{\r\n  IWDG_TypeDef                 *Instance;  /*!< Register base address    */\r\n\r\n  IWDG_InitTypeDef             Init;       /*!< IWDG required parameters */\r\n} IWDG_HandleTypeDef;\r\n\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Exported constants --------------------------------------------------------*/\r\n/** @defgroup IWDG_Exported_Constants IWDG Exported Constants\r\n  * @{\r\n  */\r\n\r\n/** @defgroup IWDG_Prescaler IWDG Prescaler\r\n  * @{\r\n  */\r\n#define IWDG_PRESCALER_4                0x00000000u                                     /*!< IWDG prescaler set to 4   */\r\n#define IWDG_PRESCALER_8                IWDG_PR_PR_0                                    /*!< IWDG prescaler set to 8   */\r\n#define IWDG_PRESCALER_16               IWDG_PR_PR_1                                    /*!< IWDG prescaler set to 16  */\r\n#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)                   /*!< IWDG prescaler set to 32  */\r\n#define IWDG_PRESCALER_64               IWDG_PR_PR_2                                    /*!< IWDG prescaler set to 64  */\r\n#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)                   /*!< IWDG prescaler set to 128 */\r\n#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)                   /*!< IWDG prescaler set to 256 */\r\n/**\r\n  * @}\r\n  */\r\n\r\n/** @defgroup IWDG_Window_option IWDG Window option\r\n  * @{\r\n  */\r\n#define IWDG_WINDOW_DISABLE             IWDG_WINR_WIN\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Exported macros -----------------------------------------------------------*/\r\n/** @defgroup IWDG_Exported_Macros IWDG Exported Macros\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Enable the IWDG peripheral.\r\n  * @param  __HANDLE__  IWDG handle\r\n  * @retval None\r\n  */\r\n#define __HAL_IWDG_START(__HANDLE__)                WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_ENABLE)\r\n\r\n/**\r\n  * @brief  Reload IWDG counter with value defined in the reload register\r\n  *         (write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers disabled).\r\n  * @param  __HANDLE__  IWDG handle\r\n  * @retval None\r\n  */\r\n#define __HAL_IWDG_RELOAD_COUNTER(__HANDLE__)       WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_RELOAD)\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Exported functions --------------------------------------------------------*/\r\n/** @defgroup IWDG_Exported_Functions  IWDG Exported Functions\r\n  * @{\r\n  */\r\n\r\n/** @defgroup IWDG_Exported_Functions_Group1 Initialization and Start functions\r\n  * @{\r\n  */\r\n/* Initialization/Start functions  ********************************************/\r\nHAL_StatusTypeDef     HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg);\r\n/**\r\n  * @}\r\n  */\r\n\r\n/** @defgroup IWDG_Exported_Functions_Group2 IO operation functions\r\n  * @{\r\n  */\r\n/* I/O operation functions ****************************************************/\r\nHAL_StatusTypeDef     HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg);\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Private constants ---------------------------------------------------------*/\r\n/** @defgroup IWDG_Private_Constants IWDG Private Constants\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  IWDG Key Register BitMask\r\n  */\r\n#define IWDG_KEY_RELOAD                 0x0000AAAAu  /*!< IWDG Reload Counter Enable   */\r\n#define IWDG_KEY_ENABLE                 0x0000CCCCu  /*!< IWDG Peripheral Enable       */\r\n#define IWDG_KEY_WRITE_ACCESS_ENABLE    0x00005555u  /*!< IWDG KR Write Access Enable  */\r\n#define IWDG_KEY_WRITE_ACCESS_DISABLE   0x00000000u  /*!< IWDG KR Write Access Disable */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Private macros ------------------------------------------------------------*/\r\n/** @defgroup IWDG_Private_Macros IWDG Private Macros\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers.\r\n  * @param  __HANDLE__  IWDG handle\r\n  * @retval None\r\n  */\r\n#define IWDG_ENABLE_WRITE_ACCESS(__HANDLE__)  WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_WRITE_ACCESS_ENABLE)\r\n\r\n/**\r\n  * @brief  Disable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers.\r\n  * @param  __HANDLE__  IWDG handle\r\n  * @retval None\r\n  */\r\n#define IWDG_DISABLE_WRITE_ACCESS(__HANDLE__) WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_WRITE_ACCESS_DISABLE)\r\n\r\n/**\r\n  * @brief  Check IWDG prescaler value.\r\n  * @param  __PRESCALER__  IWDG prescaler value\r\n  * @retval None\r\n  */\r\n#define IS_IWDG_PRESCALER(__PRESCALER__)      (((__PRESCALER__) == IWDG_PRESCALER_4)  || \\\r\n                                               ((__PRESCALER__) == IWDG_PRESCALER_8)  || \\\r\n                                               ((__PRESCALER__) == IWDG_PRESCALER_16) || \\\r\n                                               ((__PRESCALER__) == IWDG_PRESCALER_32) || \\\r\n                                               ((__PRESCALER__) == IWDG_PRESCALER_64) || \\\r\n                                               ((__PRESCALER__) == IWDG_PRESCALER_128)|| \\\r\n                                               ((__PRESCALER__) == IWDG_PRESCALER_256))\r\n\r\n/**\r\n  * @brief  Check IWDG reload value.\r\n  * @param  __RELOAD__  IWDG reload value\r\n  * @retval None\r\n  */\r\n#define IS_IWDG_RELOAD(__RELOAD__)            ((__RELOAD__) <= IWDG_RLR_RL)\r\n\r\n/**\r\n  * @brief  Check IWDG window value.\r\n  * @param  __WINDOW__  IWDG window value\r\n  * @retval None\r\n  */\r\n#define IS_IWDG_WINDOW(__WINDOW__)            ((__WINDOW__) <= IWDG_WINR_WIN)\r\n\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n\r\n#ifdef __cplusplus\r\n}\r\n#endif\r\n\r\n#endif /* STM32F0xx_HAL_IWDG_H */\r\n","uri":"file:///g%3A/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h","version":1}}}},{"pid":0,"ph":"i","name":"Log","ts":2072363.2,"tid":47116,"args":{"Message":"<-- reply(5)"}},{"pid":0,"ph":"X","name":"Update","ts":1142963.8999999999,"tid":50224,"dur":702648.10000000009,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":1092902.3,"tid":47116,"dur":449.89999999990687,"args":{"Params":{"textDocument":{"languageId":"c","text":"/**\r\n  ******************************************************************************\r\n  * @file    stm32f0xx_hal_iwdg.c\r\n  * @author  MCD Application Team\r\n  * @brief   IWDG HAL module driver.\r\n  *          This file provides firmware functions to manage the following\r\n  *          functionalities of the Independent Watchdog (IWDG) peripheral:\r\n  *           + Initialization and Start functions\r\n  *           + IO operation functions\r\n  *\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * Copyright (c) 2016 STMicroelectronics.\r\n  * All rights reserved.\r\n  *\r\n  * This software is licensed under terms that can be found in the LICENSE file\r\n  * in the root directory of this software component.\r\n  * If no LICENSE file comes with this software, it is provided AS-IS.\r\n  *\r\n  ******************************************************************************\r\n  @verbatim\r\n  ==============================================================================\r\n                    ##### IWDG Generic features #####\r\n  ==============================================================================\r\n  [..]\r\n    (+) The IWDG can be started by either software or hardware (configurable\r\n        through option byte).\r\n\r\n    (+) The IWDG is clocked by the Low-Speed Internal clock (LSI) and thus stays\r\n        active even if the main clock fails.\r\n\r\n    (+) Once the IWDG is started, the LSI is forced ON and both cannot be\r\n        disabled. The counter starts counting down from the reset value (0xFFF).\r\n        When it reaches the end of count value (0x000) a reset signal is\r\n        generated (IWDG reset).\r\n\r\n    (+) Whenever the key value 0x0000 AAAA is written in the IWDG_KR register,\r\n        the IWDG_RLR value is reloaded into the counter and the watchdog reset\r\n        is prevented.\r\n\r\n    (+) The IWDG is implemented in the VDD voltage domain that is still functional\r\n        in STOP and STANDBY mode (IWDG reset can wake up the CPU from STANDBY).\r\n        IWDGRST flag in RCC_CSR register can be used to inform when an IWDG\r\n        reset occurs.\r\n\r\n    (+) Debug mode: When the microcontroller enters debug mode (core halted),\r\n        the IWDG counter either continues to work normally or stops, depending\r\n        on DBG_IWDG_STOP configuration bit in DBG module, accessible through\r\n        __HAL_DBGMCU_FREEZE_IWDG() and __HAL_DBGMCU_UNFREEZE_IWDG() macros.\r\n\r\n    [..] Min-max timeout value @32KHz (LSI): ~125us / ~32.7s\r\n         The IWDG timeout may vary due to LSI clock frequency dispersion.\r\n         STM32F0xx devices provide the capability to measure the LSI clock\r\n         frequency (LSI clock is internally connected to TIM16 CH1 input capture).\r\n         The measured value can be used to have an IWDG timeout with an\r\n         acceptable accuracy.\r\n\r\n    [..] Default timeout value (necessary for IWDG_SR status register update):\r\n         Constant LSI_VALUE is defined based on the nominal LSI clock frequency.\r\n         This frequency being subject to variations as mentioned above, the\r\n         default timeout value (defined through constant HAL_IWDG_DEFAULT_TIMEOUT\r\n         below) may become too short or too long.\r\n         In such cases, this default timeout value can be tuned by redefining\r\n         the constant LSI_VALUE at user-application level (based, for instance,\r\n         on the measured LSI clock frequency as explained above).\r\n\r\n                     ##### How to use this driver #####\r\n  ==============================================================================\r\n  [..]\r\n    (#) Use IWDG using HAL_IWDG_Init() function to :\r\n      (++) Enable instance by writing Start keyword in IWDG_KEY register. LSI\r\n           clock is forced ON and IWDG counter starts counting down.\r\n      (++) Enable write access to configuration registers:\r\n          IWDG_PR, IWDG_RLR and IWDG_WINR.\r\n      (++) Configure the IWDG prescaler and counter reload value. This reload\r\n           value will be loaded in the IWDG counter each time the watchdog is\r\n           reloaded, then the IWDG will start counting down from this value.\r\n      (++) Depending on window parameter:\r\n        (+++) If Window Init parameter is same as Window register value,\r\n             nothing more is done but reload counter value in order to exit\r\n             function with exact time base.\r\n        (+++) Else modify Window register. This will automatically reload\r\n             watchdog counter.\r\n      (++) Wait for status flags to be reset.\r\n\r\n    (#) Then the application program must refresh the IWDG counter at regular\r\n        intervals during normal operation to prevent an MCU reset, using\r\n        HAL_IWDG_Refresh() function.\r\n\r\n     *** IWDG HAL driver macros list ***\r\n     ====================================\r\n     [..]\r\n       Below the list of most used macros in IWDG HAL driver:\r\n      (+) __HAL_IWDG_START: Enable the IWDG peripheral\r\n      (+) __HAL_IWDG_RELOAD_COUNTER: Reloads IWDG counter with value defined in\r\n          the reload register\r\n\r\n  @endverbatim\r\n  */\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"stm32f0xx_hal.h\"\r\n\r\n/** @addtogroup STM32F0xx_HAL_Driver\r\n  * @{\r\n  */\r\n\r\n#ifdef HAL_IWDG_MODULE_ENABLED\r\n/** @addtogroup IWDG\r\n  * @brief IWDG HAL module driver.\r\n  * @{\r\n  */\r\n\r\n/* Private typedef -----------------------------------------------------------*/\r\n/* Private define ------------------------------------------------------------*/\r\n/** @defgroup IWDG_Private_Defines IWDG Private Defines\r\n  * @{\r\n  */\r\n/* Status register needs up to 5 LSI clock periods divided by the clock\r\n   prescaler to be updated. The number of LSI clock periods is upper-rounded to\r\n   6 for the timeout value calculation.\r\n   The timeout value is calculated using the highest prescaler (256) and\r\n   the LSI_VALUE constant. The value of this constant can be changed by the user\r\n   to take into account possible LSI clock period variations.\r\n   The timeout value is multiplied by 1000 to be converted in milliseconds.\r\n   LSI startup time is also considered here by adding LSI_STARTUP_TIME\r\n   converted in milliseconds. */\r\n#define HAL_IWDG_DEFAULT_TIMEOUT        (((6UL * 256UL * 1000UL) / LSI_VALUE) + ((LSI_STARTUP_TIME / 1000UL) + 1UL))\r\n#define IWDG_KERNEL_UPDATE_FLAGS        (IWDG_SR_WVU | IWDG_SR_RVU | IWDG_SR_PVU)\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Private macro -------------------------------------------------------------*/\r\n/* Private variables ---------------------------------------------------------*/\r\n/* Private function prototypes -----------------------------------------------*/\r\n/* Exported functions --------------------------------------------------------*/\r\n\r\n/** @addtogroup IWDG_Exported_Functions\r\n  * @{\r\n  */\r\n\r\n/** @addtogroup IWDG_Exported_Functions_Group1\r\n  *  @brief    Initialization and Start functions.\r\n  *\r\n@verbatim\r\n ===============================================================================\r\n          ##### Initialization and Start functions #####\r\n ===============================================================================\r\n [..]  This section provides functions allowing to:\r\n      (+) Initialize the IWDG according to the specified parameters in the\r\n          IWDG_InitTypeDef of associated handle.\r\n      (+) Manage Window option.\r\n      (+) Once initialization is performed in HAL_IWDG_Init function, Watchdog\r\n          is reloaded in order to exit function with correct time base.\r\n\r\n@endverbatim\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Initialize the IWDG according to the specified parameters in the\r\n  *         IWDG_InitTypeDef and start watchdog. Before exiting function,\r\n  *         watchdog is refreshed in order to have correct time base.\r\n  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains\r\n  *                the configuration information for the specified IWDG module.\r\n  * @retval HAL status\r\n  */\r\nHAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)\r\n{\r\n  uint32_t tickstart;\r\n\r\n  /* Check the IWDG handle allocation */\r\n  if (hiwdg == NULL)\r\n  {\r\n    return HAL_ERROR;\r\n  }\r\n\r\n  /* Check the parameters */\r\n  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));\r\n  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));\r\n  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));\r\n  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));\r\n\r\n  /* Enable IWDG. LSI is turned on automatically */\r\n  __HAL_IWDG_START(hiwdg);\r\n\r\n  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing\r\n  0x5555 in KR */\r\n  IWDG_ENABLE_WRITE_ACCESS(hiwdg);\r\n\r\n  /* Write to IWDG registers the Prescaler & Reload values to work with */\r\n  hiwdg->Instance->PR = hiwdg->Init.Prescaler;\r\n  hiwdg->Instance->RLR = hiwdg->Init.Reload;\r\n\r\n  /* Check pending flag, if previous update not done, return timeout */\r\n  tickstart = HAL_GetTick();\r\n\r\n  /* Wait for register to be updated */\r\n  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)\r\n  {\r\n    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)\r\n    {\r\n      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)\r\n      {\r\n        return HAL_TIMEOUT;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* If window parameter is different than current value, modify window\r\n  register */\r\n  if (hiwdg->Instance->WINR != hiwdg->Init.Window)\r\n  {\r\n    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,\r\n    even if window feature is disabled, Watchdog will be reloaded by writing\r\n    windows register */\r\n    hiwdg->Instance->WINR = hiwdg->Init.Window;\r\n  }\r\n  else\r\n  {\r\n    /* Reload IWDG counter with value defined in the reload register */\r\n    __HAL_IWDG_RELOAD_COUNTER(hiwdg);\r\n  }\r\n\r\n  /* Return function status */\r\n  return HAL_OK;\r\n}\r\n\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n\r\n/** @addtogroup IWDG_Exported_Functions_Group2\r\n  *  @brief   IO operation functions\r\n  *\r\n@verbatim\r\n ===============================================================================\r\n                      ##### IO operation functions #####\r\n ===============================================================================\r\n [..]  This section provides functions allowing to:\r\n      (+) Refresh the IWDG.\r\n\r\n@endverbatim\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Refresh the IWDG.\r\n  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains\r\n  *                the configuration information for the specified IWDG module.\r\n  * @retval HAL status\r\n  */\r\nHAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)\r\n{\r\n  /* Reload IWDG counter with value defined in the reload register */\r\n  __HAL_IWDG_RELOAD_COUNTER(hiwdg);\r\n\r\n  /* Return function status */\r\n  return HAL_OK;\r\n}\r\n\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n#endif /* HAL_IWDG_MODULE_ENABLED */\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n","uri":"file:///g%3A/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_iwdg.c","version":1}}}},{"pid":0,"ph":"i","name":"Log","ts":2075607,"tid":37816,"args":{"Message":"Built preamble of size 1816700 for file g:\\1\\Modbus_f030\\demo\\Core\\Src\\freertos.c version 1 in 1.00 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":2075673,"tid":37816,"dur":208,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":1071339.8999999999,"tid":37816,"dur":1004560.5,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\freertos.c"}},{"pid":0,"ph":"i","name":"Log","ts":2076000.1000000001,"tid":37816,"args":{"Message":"--> workspace/semanticTokens/refresh(7)"}},{"pid":0,"ph":"X","name":"getConfig","ts":2076152.8999999999,"tid":2860,"dur":20,"args":{"path":"g:/1/Modbus_f030/demo/Core/Src/freertos.c"}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":1947513.8999999999,"tid":45060,"dur":133747.5,"args":{}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":2076950.1000000001,"tid":2860,"dur":9757.2999999998137,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\freertos.c"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":2087788.5,"tid":2860,"dur":39.699999999953434,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":2091250.5,"tid":2860,"dur":8712.1000000000931,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":2108969.1000000001,"tid":47116,"args":{"Message":"<-- reply(6)"}},{"pid":0,"ph":"i","name":"Log","ts":2148978.2999999998,"tid":47116,"args":{"Message":"<-- reply(7)"}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":2140052.1000000001,"tid":2860,"dur":11286.799999999814,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":2151725.2999999998,"tid":33840,"dur":594.70000000018626,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":2153330.8999999999,"tid":33840,"dur":1.5,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":2153049.1000000001,"tid":33840,"dur":300.89999999990687,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":2153367.8999999999,"tid":33840,"dur":4943,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":1947438.8,"tid":33840,"dur":211283.19999999995,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Drivers\\STM32F0xx_HAL_Driver\\Inc\\stm32f0xx_ll_iwdg.h"}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":2166446.7000000002,"tid":2860,"dur":60.5,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":2165454.8999999999,"tid":2860,"dur":1080.6000000000931,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":2166674.3999999999,"tid":33840,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":2166762.7999999998,"tid":33840,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":2166802.2000000002,"tid":33840,"dur":255.39999999990687,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":2158760.5,"tid":33840,"dur":8310.1000000000931,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":1947373,"tid":33840,"dur":220327.39999999991,"args":{}},{"pid":0,"ph":"X","name":"Update","ts":1137545.3999999999,"tid":33840,"dur":809811,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":1080291.3999999999,"tid":47116,"dur":389,"args":{"Params":{"textDocument":{"languageId":"cpp","text":"/**\r\n  ******************************************************************************\r\n  * @file    stm32f0xx_ll_iwdg.h\r\n  * @author  MCD Application Team\r\n  * @brief   Header file of IWDG LL module.\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * Copyright (c) 2016 STMicroelectronics.\r\n  * All rights reserved.\r\n  *\r\n  * This software is licensed under terms that can be found in the LICENSE file\r\n  * in the root directory of this software component.\r\n  * If no LICENSE file comes with this software, it is provided AS-IS.\r\n  *\r\n  ******************************************************************************\r\n  */\r\n\r\n/* Define to prevent recursive inclusion -------------------------------------*/\r\n#ifndef STM32F0xx_LL_IWDG_H\r\n#define STM32F0xx_LL_IWDG_H\r\n\r\n#ifdef __cplusplus\r\nextern \"C\" {\r\n#endif\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"stm32f0xx.h\"\r\n\r\n/** @addtogroup STM32F0xx_LL_Driver\r\n  * @{\r\n  */\r\n\r\n#if defined(IWDG)\r\n\r\n/** @defgroup IWDG_LL IWDG\r\n  * @{\r\n  */\r\n\r\n/* Private types -------------------------------------------------------------*/\r\n/* Private variables ---------------------------------------------------------*/\r\n\r\n/* Private constants ---------------------------------------------------------*/\r\n/** @defgroup IWDG_LL_Private_Constants IWDG Private Constants\r\n  * @{\r\n  */\r\n#define LL_IWDG_KEY_RELOAD                 0x0000AAAAU               /*!< IWDG Reload Counter Enable   */\r\n#define LL_IWDG_KEY_ENABLE                 0x0000CCCCU               /*!< IWDG Peripheral Enable       */\r\n#define LL_IWDG_KEY_WR_ACCESS_ENABLE       0x00005555U               /*!< IWDG KR Write Access Enable  */\r\n#define LL_IWDG_KEY_WR_ACCESS_DISABLE      0x00000000U               /*!< IWDG KR Write Access Disable */\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Private macros ------------------------------------------------------------*/\r\n\r\n/* Exported types ------------------------------------------------------------*/\r\n/* Exported constants --------------------------------------------------------*/\r\n/** @defgroup IWDG_LL_Exported_Constants IWDG Exported Constants\r\n  * @{\r\n  */\r\n\r\n/** @defgroup IWDG_LL_EC_GET_FLAG Get Flags Defines\r\n  * @brief    Flags defines which can be used with LL_IWDG_ReadReg function\r\n  * @{\r\n  */\r\n#define LL_IWDG_SR_PVU                     IWDG_SR_PVU                           /*!< Watchdog prescaler value update */\r\n#define LL_IWDG_SR_RVU                     IWDG_SR_RVU                           /*!< Watchdog counter reload value update */\r\n#define LL_IWDG_SR_WVU                     IWDG_SR_WVU                           /*!< Watchdog counter window value update */\r\n/**\r\n  * @}\r\n  */\r\n\r\n/** @defgroup IWDG_LL_EC_PRESCALER  Prescaler Divider\r\n  * @{\r\n  */\r\n#define LL_IWDG_PRESCALER_4                0x00000000U                           /*!< Divider by 4   */\r\n#define LL_IWDG_PRESCALER_8                (IWDG_PR_PR_0)                        /*!< Divider by 8   */\r\n#define LL_IWDG_PRESCALER_16               (IWDG_PR_PR_1)                        /*!< Divider by 16  */\r\n#define LL_IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)         /*!< Divider by 32  */\r\n#define LL_IWDG_PRESCALER_64               (IWDG_PR_PR_2)                        /*!< Divider by 64  */\r\n#define LL_IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)         /*!< Divider by 128 */\r\n#define LL_IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)         /*!< Divider by 256 */\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/* Exported macro ------------------------------------------------------------*/\r\n/** @defgroup IWDG_LL_Exported_Macros IWDG Exported Macros\r\n  * @{\r\n  */\r\n\r\n/** @defgroup IWDG_LL_EM_WRITE_READ Common Write and read registers Macros\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Write a value in IWDG register\r\n  * @param  __INSTANCE__ IWDG Instance\r\n  * @param  __REG__ Register to be written\r\n  * @param  __VALUE__ Value to be written in the register\r\n  * @retval None\r\n  */\r\n#define LL_IWDG_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))\r\n\r\n/**\r\n  * @brief  Read a value in IWDG register\r\n  * @param  __INSTANCE__ IWDG Instance\r\n  * @param  __REG__ Register to be read\r\n  * @retval Register value\r\n  */\r\n#define LL_IWDG_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n\r\n/* Exported functions --------------------------------------------------------*/\r\n/** @defgroup IWDG_LL_Exported_Functions IWDG Exported Functions\r\n  * @{\r\n  */\r\n/** @defgroup IWDG_LL_EF_Configuration Configuration\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Start the Independent Watchdog\r\n  * @note   Except if the hardware watchdog option is selected\r\n  * @rmtoll KR           KEY           LL_IWDG_Enable\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)\r\n{\r\n  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);\r\n}\r\n\r\n/**\r\n  * @brief  Reloads IWDG counter with value defined in the reload register\r\n  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)\r\n{\r\n  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);\r\n}\r\n\r\n/**\r\n  * @brief  Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers\r\n  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)\r\n{\r\n  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);\r\n}\r\n\r\n/**\r\n  * @brief  Disable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers\r\n  * @rmtoll KR           KEY           LL_IWDG_DisableWriteAccess\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_DisableWriteAccess(IWDG_TypeDef *IWDGx)\r\n{\r\n  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_DISABLE);\r\n}\r\n\r\n/**\r\n  * @brief  Select the prescaler of the IWDG\r\n  * @rmtoll PR           PR            LL_IWDG_SetPrescaler\r\n  * @param  IWDGx IWDG Instance\r\n  * @param  Prescaler This parameter can be one of the following values:\r\n  *         @arg @ref LL_IWDG_PRESCALER_4\r\n  *         @arg @ref LL_IWDG_PRESCALER_8\r\n  *         @arg @ref LL_IWDG_PRESCALER_16\r\n  *         @arg @ref LL_IWDG_PRESCALER_32\r\n  *         @arg @ref LL_IWDG_PRESCALER_64\r\n  *         @arg @ref LL_IWDG_PRESCALER_128\r\n  *         @arg @ref LL_IWDG_PRESCALER_256\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)\r\n{\r\n  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);\r\n}\r\n\r\n/**\r\n  * @brief  Get the selected prescaler of the IWDG\r\n  * @rmtoll PR           PR            LL_IWDG_GetPrescaler\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval Returned value can be one of the following values:\r\n  *         @arg @ref LL_IWDG_PRESCALER_4\r\n  *         @arg @ref LL_IWDG_PRESCALER_8\r\n  *         @arg @ref LL_IWDG_PRESCALER_16\r\n  *         @arg @ref LL_IWDG_PRESCALER_32\r\n  *         @arg @ref LL_IWDG_PRESCALER_64\r\n  *         @arg @ref LL_IWDG_PRESCALER_128\r\n  *         @arg @ref LL_IWDG_PRESCALER_256\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_GetPrescaler(IWDG_TypeDef *IWDGx)\r\n{\r\n  return (READ_REG(IWDGx->PR));\r\n}\r\n\r\n/**\r\n  * @brief  Specify the IWDG down-counter reload value\r\n  * @rmtoll RLR          RL            LL_IWDG_SetReloadCounter\r\n  * @param  IWDGx IWDG Instance\r\n  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)\r\n{\r\n  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);\r\n}\r\n\r\n/**\r\n  * @brief  Get the specified IWDG down-counter reload value\r\n  * @rmtoll RLR          RL            LL_IWDG_GetReloadCounter\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval Value between Min_Data=0 and Max_Data=0x0FFF\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_GetReloadCounter(IWDG_TypeDef *IWDGx)\r\n{\r\n  return (READ_REG(IWDGx->RLR));\r\n}\r\n\r\n/**\r\n  * @brief  Specify high limit of the window value to be compared to the down-counter.\r\n  * @rmtoll WINR         WIN           LL_IWDG_SetWindow\r\n  * @param  IWDGx IWDG Instance\r\n  * @param  Window Value between Min_Data=0 and Max_Data=0x0FFF\r\n  * @retval None\r\n  */\r\n__STATIC_INLINE void LL_IWDG_SetWindow(IWDG_TypeDef *IWDGx, uint32_t Window)\r\n{\r\n  WRITE_REG(IWDGx->WINR, IWDG_WINR_WIN & Window);\r\n}\r\n\r\n/**\r\n  * @brief  Get the high limit of the window value specified.\r\n  * @rmtoll WINR         WIN           LL_IWDG_GetWindow\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval Value between Min_Data=0 and Max_Data=0x0FFF\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_GetWindow(IWDG_TypeDef *IWDGx)\r\n{\r\n  return (READ_REG(IWDGx->WINR));\r\n}\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/** @defgroup IWDG_LL_EF_FLAG_Management FLAG_Management\r\n  * @{\r\n  */\r\n\r\n/**\r\n  * @brief  Check if flag Prescaler Value Update is set or not\r\n  * @rmtoll SR           PVU           LL_IWDG_IsActiveFlag_PVU\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval State of bit (1 or 0).\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_IsActiveFlag_PVU(IWDG_TypeDef *IWDGx)\r\n{\r\n  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU) == (IWDG_SR_PVU)) ? 1UL : 0UL);\r\n}\r\n\r\n/**\r\n  * @brief  Check if flag Reload Value Update is set or not\r\n  * @rmtoll SR           RVU           LL_IWDG_IsActiveFlag_RVU\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval State of bit (1 or 0).\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_IsActiveFlag_RVU(IWDG_TypeDef *IWDGx)\r\n{\r\n  return ((READ_BIT(IWDGx->SR, IWDG_SR_RVU) == (IWDG_SR_RVU)) ? 1UL : 0UL);\r\n}\r\n\r\n/**\r\n  * @brief  Check if flag Window Value Update is set or not\r\n  * @rmtoll SR           WVU           LL_IWDG_IsActiveFlag_WVU\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval State of bit (1 or 0).\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_IsActiveFlag_WVU(IWDG_TypeDef *IWDGx)\r\n{\r\n  return ((READ_BIT(IWDGx->SR, IWDG_SR_WVU) == (IWDG_SR_WVU)) ? 1UL : 0UL);\r\n}\r\n\r\n/**\r\n  * @brief  Check if all flags Prescaler, Reload & Window Value Update are reset or not\r\n  * @rmtoll SR           PVU           LL_IWDG_IsReady\\n\r\n  *         SR           RVU           LL_IWDG_IsReady\\n\r\n  *         SR           WVU           LL_IWDG_IsReady\r\n  * @param  IWDGx IWDG Instance\r\n  * @retval State of bits (1 or 0).\r\n  */\r\n__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)\r\n{\r\n  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);\r\n}\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n#endif /* IWDG */\r\n\r\n/**\r\n  * @}\r\n  */\r\n\r\n#ifdef __cplusplus\r\n}\r\n#endif\r\n\r\n#endif /* STM32F0xx_LL_IWDG_H */\r\n","uri":"file:///g%3A/1/Modbus_f030/demo/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_iwdg.h","version":1}}}},{"pid":0,"ph":"i","name":"Log","ts":2167832.5,"tid":33840,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":2166564.3999999999,"tid":2860,"dur":4016.5,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":2076239.7,"tid":2860,"dur":95085.199999999953,"args":{"File":"g:\\1\\Modbus_f030\\demo\\Core\\Src\\freertos.c"}},{"pid":0,"ph":"i","name":"Log","ts":2175486.2999999998,"tid":2860,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":2176338.8999999999,"tid":2860,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":2176477.2000000002,"tid":2860,"dur":964.39999999990687,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":2171353,"tid":2860,"dur":6109.7000000001863,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":2076149.6000000001,"tid":2860,"dur":102436.19999999972,"args":{}},{"pid":0,"ph":"X","name":"Update","ts":1042049.1,"tid":2860,"dur":1034070.7999999999,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":984785.69999999995,"tid":47116,"dur":921.5,"args":{"Params":{"textDocument":{"languageId":"c","text":"/* USER CODE BEGIN Header */\r\n/**\r\n ******************************************************************************\r\n * File Name          : freertos.c\r\n * Description        : Code for freertos applications\r\n ******************************************************************************\r\n * @attention\r\n *\r\n * Copyright (c) 2024 STMicroelectronics.\r\n * All rights reserved.\r\n *\r\n * This software is licensed under terms that can be found in the LICENSE file\r\n * in the root directory of this software component.\r\n * If no LICENSE file comes with this software, it is provided AS-IS.\r\n *\r\n ******************************************************************************\r\n */\r\n\r\n// 注意：本程序基于百问网的Modbus传感器程序进行修改\r\n// 模块名称 : 嵌入式竞赛版Modbus传感器程序\r\n// 文件名称 : freertos.c\r\n// 作    者 : FHS\r\n// 版    本 : V1.0\r\n// 创建时间 : 2025-06-19\r\n// 最后修改 : 2025-06-19\r\n// 功能描述 : FreeRTOS源文件\r\n// 历史记录 : 2025-06-19 V1.0\r\n//====================================================================\r\n//  日期       |   版本   |   作者    |   描述\r\n//--------------------------------------------------------------------\r\n// 2025-06-19 |  V1.0    |   FHS     | 修改完成第一版\r\n// 2025-07-14 |  V1.1    |   FHS     | 增加看门狗复位\r\n// 2025-07-15 |  V1.2    |   FHS     | 修复BUG\r\n//====================================================================\r\n\r\n/* USER CODE END Header */\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"FreeRTOS.h\"\r\n#include \"task.h\"\r\n#include \"main.h\"\r\n#include \"cmsis_os.h\"\r\n\r\n/* Private includes ----------------------------------------------------------*/\r\n/* USER CODE BEGIN Includes */\r\n#include \"uart_device.h\"\r\n#include \"modbus.h\"\r\n#include \"errno.h\"\r\n#include \"adc.h\"\r\n#include \"usart.h\"\r\n#include \"semphr.h\"\r\n#include \"string.h\"\r\n#include \"iwdg.h\"\r\n\r\n/* USER CODE END Includes */\r\n\r\n/* Private typedef -----------------------------------------------------------*/\r\n/* USER CODE BEGIN PTD */\r\n\r\n/* USER CODE END PTD */\r\n\r\n/* Private define ------------------------------------------------------------*/\r\n/* USER CODE BEGIN PD */\r\n\r\n#define USE_QSB\r\n// #define PM\r\n// #define KZ\r\n// #define BH1750\r\n#define QT\r\n//#define USE_ENV_MONITOR_SENSOR 1\r\n//#define USE_TMP_HUMI_SENSOR 1\r\n\r\n#ifdef USE_SWITCH_SENSOR\r\n\r\n#define SLAVE_ADDR         1\r\n#define NB_BITS            5\r\n#define NB_INPUT_BITS      3\r\n#define NB_REGISTERS       0\r\n#define NB_INPUT_REGISTERS 0\r\n\r\n#endif\r\n\r\n#ifdef USE_ENV_MONITOR_SENSOR\r\nextern ADC_HandleTypeDef hadc;\r\n\r\n#define SLAVE_ADDR         2\r\n#define NB_BITS            5\r\n#define NB_INPUT_BITS      0\r\n#define NB_REGISTERS       0\r\n#define NB_INPUT_REGISTERS 2\r\n\r\n#endif\r\n\r\n#ifdef USE_TMP_HUMI_SENSOR\r\n\r\nvoid        AHT20Task(void *argument);\r\nstatic void aht20_get_datas(uint16_t *temp, uint16_t *humi);\r\n\r\n#define SLAVE_ADDR         3\r\n#define NB_BITS            5\r\n#define NB_INPUT_BITS      0\r\n#define NB_REGISTERS       0\r\n#define NB_INPUT_REGISTERS 2\r\n\r\n#endif\r\n\r\n#ifdef USE_QSB\r\n\r\nSemaphoreHandle_t AHT20Mutex;\r\n\r\nstatic void AHT20Task(void *argument);\r\nstatic void adc_sensorTask(void *argument);\r\nstatic void aht20_get_datas(uint16_t *temp, uint16_t *humi);\r\n\r\n#ifdef BH1750\r\n\r\nstatic void BH1750Task(void *argument);\r\nstatic void BH1750_get_datas(uint16_t *light);\r\n\r\n#endif\r\n\r\n#ifdef PM\r\n\r\nstatic void Sensor_Parsing_Task(void *argument);\r\n\r\n#endif\r\n\r\n#define SLAVE_ADDR    20\r\n#define NB_BITS       5\r\n#define NB_INPUT_BITS 1\r\n\r\n#ifdef KZ\r\n\r\n#define NB_REGISTERS 2\r\n\r\n#else\r\n\r\n#define NB_REGISTERS 0\r\n\r\n#endif\r\n\r\n#ifdef BH1750\r\n\r\n#define NB_INPUT_REGISTERS 5\r\n\r\n#elif defined(PM)\r\n\r\n#define NB_INPUT_REGISTERS 14\r\n\r\n#else\r\n\r\n#define NB_INPUT_REGISTERS 4\r\n\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef BH1750\r\n\r\nSemaphoreHandle_t BH1750Mutex;\r\n\r\n// BH1750 I2C地址\r\n#define BH1750_ADDR_LOW  0x23 // ADDR引脚接地\r\n#define BH1750_ADDR_HIGH 0x5C // ADDR引脚接VCC\r\n#define BH1750_I2C_ADDR  BH1750_ADDR_HIGH\r\n\r\n// BH1750操作码\r\n#define BH1750_POWER_DOWN       0x00\r\n#define BH1750_POWER_ON         0x01\r\n#define BH1750_RESET            0x07\r\n#define BH1750_CONT_H_RES_MODE  0x10 // 连续高分辨率模式\r\n#define BH1750_CONT_H_RES_MODE2 0x11 // 连续高分辨率模式2\r\n#define BH1750_CONT_L_RES_MODE  0x13 // 连续低分辨率模式\r\n#define BH1750_ONE_H_RES_MODE   0x20 // 单次高分辨率模式\r\n#define BH1750_ONE_H_RES_MODE2  0x21 // 单次高分辨率模式2\r\n#define BH1750_ONE_L_RES_MODE   0x23 // 单次低分辨率模式\r\n\r\n// 测量结果结构体\r\ntypedef struct\r\n{\r\n    float    lux; // 光照强度(lux)\r\n    uint16_t raw; // 原始数据\r\n} BH1750_Data;\r\n\r\n// 设置测量模式\r\nuint8_t BH1750_SetMode(I2C_HandleTypeDef *hi2c, uint8_t mode)\r\n{\r\n    if (HAL_I2C_Master_Transmit(hi2c, BH1750_I2C_ADDR << 1, &mode, 1, 100) != HAL_OK)\r\n    {\r\n        return HAL_ERROR;\r\n    }\r\n    return HAL_OK;\r\n}\r\n\r\nuint8_t BH1750_Init(I2C_HandleTypeDef *hi2c)\r\n{\r\n    // 发送上电命令\r\n    uint8_t cmd = BH1750_POWER_ON;\r\n    if (HAL_I2C_Master_Transmit(hi2c, BH1750_I2C_ADDR << 1, &cmd, 1, 100) != HAL_OK)\r\n    {\r\n        return HAL_ERROR;\r\n    }\r\n\r\n    // 设置默认测量模式\r\n    return BH1750_SetMode(hi2c, BH1750_CONT_H_RES_MODE);\r\n}\r\n\r\n// 重置传感器\r\nuint8_t BH1750_Reset(I2C_HandleTypeDef *hi2c)\r\n{\r\n    uint8_t cmd = BH1750_RESET;\r\n    return HAL_I2C_Master_Transmit(hi2c, BH1750_I2C_ADDR << 1, &cmd, 1, 100);\r\n}\r\n\r\n// 读取光照强度\r\nuint8_t BH1750_ReadLight(I2C_HandleTypeDef *hi2c, BH1750_Data *result)\r\n{\r\n    uint8_t data[2] = {0};\r\n\r\n    // 读取两个字节数据\r\n    if (HAL_I2C_Master_Receive(hi2c, BH1750_I2C_ADDR << 1, data, 2, 100) != HAL_OK)\r\n    {\r\n        return HAL_ERROR;\r\n    }\r\n\r\n    // 组合原始数据\r\n    result->raw = (data[0] << 8) | data[1];\r\n\r\n    // 转换为lux值 (分辨率=1.2)\r\n    result->lux = result->raw / 1.2f;\r\n\r\n    return HAL_OK;\r\n}\r\n\r\n#endif\r\n\r\n#ifdef PM\r\n\r\n// 解析颗粒物数量(0.1升空气中)\r\ntypedef struct\r\n{\r\n    // PM浓度值（μg/m³）\r\n    uint16_t pm1_0_cf1; // CF=1环境下的PM1.0\r\n    uint16_t pm2_5_cf1; // CF=1环境下的PM2.5\r\n    uint16_t pm10_cf1;  // CF=1环境下的PM10\r\n    uint16_t pm1_0_atm; // 大气环境下的PM1.0\r\n    uint16_t pm2_5_atm; // 大气环境下的PM2.5（主要监测值）\r\n    uint16_t pm10_atm;  // 大气环境下的PM10\r\n\r\n    // 颗粒物数量（0.1升空气中）\r\n    uint16_t particles_0_3um; // 直径>0.3μm的颗粒数\r\n    uint16_t particles_0_5um; // 直径>0.5μm的颗粒数\r\n    uint16_t particles_1_0um; // 直径>1.0μm的颗粒数\r\n    uint16_t particles_2_5um; // 直径>2.5μm的颗粒数\r\n    uint16_t particles_5_0um; // 直径>5.0μm的颗粒数\r\n    uint16_t particles_10um;  // 直径>10μm的颗粒数\r\n} PM_SensorData;\r\n\r\n#endif\r\n/* USER CODE END PD */\r\n\r\n/* Private macro -------------------------------------------------------------*/\r\n/* USER CODE BEGIN PM */\r\n\r\n/* USER CODE END PM */\r\n\r\n/* Private variables ---------------------------------------------------------*/\r\n/* USER CODE BEGIN Variables */\r\n\r\n/* USER CODE END Variables */\r\n/* Definitions for defaultTask */\r\nosThreadId_t         defaultTaskHandle;\r\nconst osThreadAttr_t defaultTask_attributes = {\r\n    .name       = \"defaultTask\",\r\n    .stack_size = 256 * 4,\r\n    .priority   = (osPriority_t)osPriorityNormal,\r\n};\r\n\r\n/* Private function prototypes -----------------------------------------------*/\r\n/* USER CODE BEGIN FunctionPrototypes */\r\n\r\n/* USER CODE END FunctionPrototypes */\r\n\r\nvoid StartDefaultTask(void *argument);\r\n\r\nvoid MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */\r\n\r\n/**\r\n  * @brief  FreeRTOS initialization\r\n  * @param  None\r\n  * @retval None\r\n  */\r\nvoid MX_FREERTOS_Init(void)\r\n{\r\n    /* USER CODE BEGIN Init */\r\n\r\n    /* USER CODE END Init */\r\n\r\n    /* USER CODE BEGIN RTOS_MUTEX */\r\n    /* add mutexes, ... */\r\n    /* USER CODE END RTOS_MUTEX */\r\n\r\n    /* USER CODE BEGIN RTOS_SEMAPHORES */\r\n    /* add semaphores, ... */\r\n    /* USER CODE END RTOS_SEMAPHORES */\r\n\r\n    /* USER CODE BEGIN RTOS_TIMERS */\r\n    /* start timers, add new ones, ... */\r\n    /* USER CODE END RTOS_TIMERS */\r\n\r\n    /* USER CODE BEGIN RTOS_QUEUES */\r\n    /* add queues, ... */\r\n    /* USER CODE END RTOS_QUEUES */\r\n\r\n    /* Create the thread(s) */\r\n    /* creation of defaultTask */\r\n    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);\r\n\r\n    /* USER CODE BEGIN RTOS_THREADS */\r\n    /* add threads, ... */\r\n#ifdef USE_QSB\r\n    osThreadNew(AHT20Task, NULL, &defaultTask_attributes);\r\n    osThreadNew(adc_sensorTask, NULL, &defaultTask_attributes);\r\n#ifdef BH1750\r\n    osThreadNew(BH1750Task, NULL, &defaultTask_attributes);\r\n#endif\r\n\r\n#ifdef PM\r\n    osThreadNew(Sensor_Parsing_Task, NULL, &defaultTask_attributes);\r\n#endif\r\n\r\n#endif\r\n    /* USER CODE END RTOS_THREADS */\r\n\r\n    /* USER CODE BEGIN RTOS_EVENTS */\r\n    /* add events, ... */\r\n    /* USER CODE END RTOS_EVENTS */\r\n}\r\n\r\n/* USER CODE BEGIN Header_StartDefaultTask */\r\n\r\n#ifdef USE_QSB\r\n\r\n//**********************************************************//\r\n//CRC校验类型： CRC8\r\n//多项式： X8+X5+X4+1\r\n//Poly:0011 0001 0x31\r\nunsigned char Calc_CRC8(unsigned char *message, unsigned char Num)\r\n{\r\n    unsigned char i;\r\n    unsigned char byte;\r\n    unsigned char crc = 0xFF;\r\n    for (byte = 0; byte < Num; byte++)\r\n    {\r\n        crc ^= (message[byte]);\r\n        for (i = 8; i > 0; --i)\r\n        {\r\n            if (crc & 0x80)\r\n                crc = (crc << 1) ^ 0x31;\r\n            else\r\n                crc = (crc << 1);\r\n        }\r\n    }\r\n    return crc;\r\n} //\r\n\r\nstatic uint32_t g_temp, g_humi;\r\n\r\nstatic void aht20_get_datas(uint16_t *temp, uint16_t *humi)\r\n{\r\n    *temp = g_temp;\r\n    *humi = g_humi;\r\n}\r\n\r\nstatic void AHT20Task(void *argument)\r\n{\r\n    uint8_t cmd[] = {0xAC, 0x33, 0x00};\r\n    uint8_t datas[7];\r\n    uint8_t crc;\r\n\r\n    extern I2C_HandleTypeDef hi2c1;\r\n\r\n    AHT20Mutex = xSemaphoreCreateMutex();\r\n\r\n    vTaskDelay(10); /* wait for ready */\r\n\r\n    while (1)\r\n    {\r\n        xSemaphoreTake(AHT20Mutex, portMAX_DELAY);\r\n        if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, 0x70, cmd, 3, 100))\r\n        {\r\n            vTaskDelay(100); /* wait for ready */\r\n            if (HAL_OK == HAL_I2C_Master_Receive(&hi2c1, 0x70, datas, 7, 100))\r\n            {\r\n                xSemaphoreGive(AHT20Mutex);\r\n                /* cal crc */\r\n                crc = Calc_CRC8(datas, 6);\r\n                if (crc == datas[6])\r\n                {\r\n                    /* ok */\r\n                    g_humi = ((uint32_t)datas[1] << 12) | ((uint32_t)datas[2] << 4) | ((uint32_t)datas[3] >> 4);\r\n                    g_temp = (((uint32_t)datas[3] & 0x0f) << 16) | ((uint32_t)datas[4] << 8) | ((uint32_t)datas[5]);\r\n\r\n                    g_humi = g_humi * 100 * 10 / 0x100000;       /* 0.1% */\r\n                    g_temp = g_temp * 200 * 10 / 0x100000 - 500; /* 0.1C */\r\n                }\r\n            }\r\n        }\r\n\r\n        vTaskDelay(20);\r\n    }\r\n}\r\n\r\n#ifdef BH1750\r\n\r\nstatic BH1750_Data light_data;\r\n\r\nstatic void BH1750_get_datas(uint16_t *light) { *light = (uint16_t)light_data.lux; }\r\n\r\nstatic void BH1750Task(void *argument)\r\n{\r\n    extern I2C_HandleTypeDef hi2c1;\r\n\r\n    BH1750Mutex = xSemaphoreCreateMutex();\r\n\r\n    xSemaphoreTake(BH1750Mutex, portMAX_DELAY);\r\n    BH1750_Init(&hi2c1);\r\n    BH1750_SetMode(&hi2c1, BH1750_ONE_H_RES_MODE);\r\n    xSemaphoreGive(BH1750Mutex);\r\n\r\n    vTaskDelay(10); /* wait for ready */\r\n\r\n    while (1)\r\n    {\r\n        xSemaphoreTake(BH1750Mutex, portMAX_DELAY);\r\n        BH1750_SetMode(&hi2c1, BH1750_ONE_H_RES_MODE);\r\n        xSemaphoreGive(BH1750Mutex);\r\n\r\n        vTaskDelay(120);\r\n\r\n        xSemaphoreTake(BH1750Mutex, portMAX_DELAY);\r\n        BH1750_ReadLight(&hi2c1, &light_data);\r\n        xSemaphoreGive(BH1750Mutex);\r\n\r\n        vTaskDelay(500);\r\n    }\r\n}\r\n\r\n#endif\r\n\r\n#ifdef PM\r\n\r\n#define FRAME_SIZE         32\r\n#define DOUBLE_BUFFER_SIZE (FRAME_SIZE) // 双缓冲大小\r\n#define PROCESS_QUEUE_SIZE 8            // 处理队列深度\r\n\r\n// FreeRTOS对象\r\nSemaphoreHandle_t uartIdleSem;\r\n\r\n// 使用双缓冲结构\r\ntypedef struct\r\n{\r\n    uint8_t active_buffer;                 // 当前活动缓冲区 (0 或 1)\r\n    uint8_t buffer[2][DOUBLE_BUFFER_SIZE]; // 双DMA缓冲区\r\n} DoubleBuffer_t;\r\n\r\nDoubleBuffer_t    dma_buffer;\r\nSemaphoreHandle_t buffer_mutex;\r\n\r\n// 开启DMA接收\r\nvoid Start_DMA_Reception(void)\r\n{\r\n    // 开启串口空闲中断\r\n    __HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);\r\n\r\n    // 开启DMA接收(双缓冲模式)\r\n    HAL_UART_Receive_DMA(&huart5, dma_buffer.buffer[dma_buffer.active_buffer], DOUBLE_BUFFER_SIZE);\r\n}\r\n\r\nvoid Handle_UART_Idle(UART_HandleTypeDef *huart)\r\n{\r\n    if (huart->Instance == USART5) // 根据您的实际USART修改\r\n    {\r\n        // 清除空闲标志\r\n        __HAL_UART_CLEAR_IDLEFLAG(huart);\r\n        // 声明上下文切换标志\r\n        BaseType_t xHigherPriorityTaskWoken = pdFALSE;\r\n\r\n        // 正确使用FromISR版本API\r\n        xSemaphoreTakeFromISR(uartIdleSem, &xHigherPriorityTaskWoken);\r\n\r\n        // 停止当前DMA传输\r\n        HAL_UART_DMAStop(&huart5);\r\n\r\n        // 切换缓冲区\r\n        dma_buffer.active_buffer = (dma_buffer.active_buffer + 1) % 2;\r\n        HAL_UART_Receive_DMA(&huart5, dma_buffer.buffer[dma_buffer.active_buffer], DOUBLE_BUFFER_SIZE);\r\n\r\n        // 如果有更高优先级任务就绪，立即切换\r\n        if (xHigherPriorityTaskWoken)\r\n        {\r\n            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);\r\n        }\r\n    }\r\n}\r\n\r\nstatic PM_SensorData pm_data;\r\n\r\nstatic void PM_get_datas(PM_SensorData *pm) { *pm = pm_data; }\r\n\r\n// 解析传感器数据\r\nvoid Parse_Sensor_Data(uint8_t *data)\r\n{\r\n    // 验证帧头(0x42, 0x4D)\r\n    if (data[0] != 0x42 || data[1] != 0x4D)\r\n        return;\r\n\r\n    // 计算校验和(前30字节求和)\r\n    uint32_t calc_checksum = 0;\r\n    for (int i = 0; i < 30; i++)\r\n        calc_checksum += data[i];\r\n\r\n    // 获取帧中的校验和\r\n    uint16_t frame_checksum = (data[30] << 8) | data[31];\r\n\r\n    if (calc_checksum == frame_checksum)\r\n    {\r\n        // 解析PM浓度值(μg/m³)\r\n        pm_data.pm1_0_cf1       = (data[4] << 8) | data[5];\r\n        pm_data.pm2_5_cf1       = (data[6] << 8) | data[7];\r\n        pm_data.pm10_cf1        = (data[8] << 8) | data[9];\r\n        pm_data.pm1_0_atm       = (data[10] << 8) | data[11];\r\n        pm_data.pm2_5_atm       = (data[12] << 8) | data[13];\r\n        pm_data.pm10_atm        = (data[14] << 8) | data[15];\r\n\r\n        // 解析颗粒物数量(0.1升空气中)\r\n        pm_data.particles_0_3um = (data[16] << 8) | data[17];\r\n        pm_data.particles_0_5um = (data[18] << 8) | data[19];\r\n        pm_data.particles_1_0um = (data[20] << 8) | data[21];\r\n        pm_data.particles_2_5um = (data[22] << 8) | data[23];\r\n        pm_data.particles_5_0um = (data[24] << 8) | data[25];\r\n        pm_data.particles_10um  = (data[26] << 8) | data[27];\r\n\r\n        /* 在此处使用传感器数据\r\n    printf(\"PM2.5(CF=1): %d μg/m³\\r\\n\", pm2_5_cf1);\r\n    printf(\"PM2.5(ATM): %d μg/m³\\r\\n\", pm2_5_atm);\r\n    printf(\">0.3μm颗粒: %d/0.1L\\r\\n\", particles_0_3um);\r\n    */\r\n    }\r\n}\r\n\r\nstatic void Sensor_Parsing_Task(void *argument)\r\n{\r\n    uint8_t i   = 0;\r\n    uartIdleSem = xSemaphoreCreateBinary();\r\n\r\n    for (;;)\r\n    {\r\n        // 从队列获取数据帧（阻塞等待）\r\n        if (xSemaphoreGive(uartIdleSem) == pdTRUE)\r\n        {\r\n            i = (dma_buffer.active_buffer + 1) % 2;\r\n            // 解析数据（此处执行时间较长）\r\n            Parse_Sensor_Data(dma_buffer.buffer[i]);\r\n        }\r\n    }\r\n}\r\n\r\n#endif\r\n\r\nstatic uint8_t beep_flag = 0;\r\n#ifdef QT\r\nstatic uint8_t gas_flag = 0;\r\n#endif\r\nstatic uint8_t beep_status = 0;\r\n\r\nstatic void adc_sensorTask(void *argument)\r\n{\r\n    uint8_t i = 0;\r\n\r\n#ifdef QT\r\n\r\n    uint8_t j = 0;\r\n\r\n#endif\r\n\r\n    while (1)\r\n    {\r\n        if (beep_flag)\r\n        {\r\n            HAL_IWDG_Refresh(&hiwdg);\r\n            i++;\r\n            if (i >= 5)\r\n            {\r\n                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);\r\n                i = 0;\r\n            }\r\n        }\r\n#ifdef QT\r\n        else if (gas_flag)\r\n        {\r\n            HAL_IWDG_Refresh(&hiwdg);\r\n            i++;\r\n            switch (j)\r\n            {\r\n                case 0:\r\n                {\r\n                    if (i >= 1)\r\n                    {\r\n                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);\r\n                        j++;\r\n                        i = 0;\r\n                    }\r\n                    break;\r\n                }\r\n                case 1:\r\n                {\r\n                    if (i >= 1)\r\n                    {\r\n                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //beep1\r\n                        j++;\r\n                        i = 0;\r\n                    }\r\n                    break;\r\n                }\r\n                case 2:\r\n                {\r\n                    if (i >= 1)\r\n                    {\r\n                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //beep1\r\n                        j++;\r\n                        i = 0;\r\n                    }\r\n                    break;\r\n                }\r\n                case 3:\r\n                {\r\n                    if (i >= 1)\r\n                    {\r\n                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //beep1\r\n                        j++;\r\n                        i = 0;\r\n                    }\r\n                    break;\r\n                }\r\n                case 4:\r\n                {\r\n                    if (i >= 6)\r\n                    {\r\n                        j = 0;\r\n                        i = 0;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n#endif\r\n\r\n        else if (!beep_status)\r\n        {\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //beep1\r\n        }\r\n\r\n        vTaskDelay(100);\r\n    }\r\n}\r\n#endif\r\n\r\n/**\r\n  * @brief  Function implementing the defaultTask thread.\r\n  * @param  argument: Not used\r\n  * @retval None\r\n  */\r\n/* USER CODE END Header_StartDefaultTask */\r\nvoid StartDefaultTask(void *argument)\r\n{\r\n    /* USER CODE BEGIN StartDefaultTask */\r\n    /* Infinite loop */\r\n    // uint16_t          adc_value[2] = {0};\r\n    // GPIO_PinState     val;        // GPIO状态暂存变量\r\n    uint8_t          *query;      // Modbus查询数据缓冲区指针\r\n    modbus_t         *ctx;        // Modbus上下文对象\r\n    int               rc;         // 操作返回值\r\n    modbus_mapping_t *mb_mapping; // Modbus寄存器映射表\r\n\r\n#ifdef USE_QSB\r\n    // 启动ADC校准（嵌赛专用）\r\n    HAL_ADCEx_Calibration_Start(&hadc);\r\n\r\n#endif\r\n    // 初始化Modbus RTU上下文\r\n    ctx = modbus_new_st_rtu(\"uart1\", 115200, 'N', 8, 1);\r\n    modbus_set_slave(ctx, SLAVE_ADDR); // 设置从机地址\r\n\r\n    // 分配Modbus ADU缓冲区\r\n    query      = pvPortMalloc(MODBUS_RTU_MAX_ADU_LENGTH);\r\n\r\n    // 创建Modbus寄存器映射表\r\n    mb_mapping = modbus_mapping_new_start_address(0, NB_BITS, 0, NB_INPUT_BITS, 0, NB_REGISTERS, 0, NB_INPUT_REGISTERS);\r\n\r\n    // 建立Modbus连接\r\n    rc         = modbus_connect(ctx);\r\n    if (rc == -1)\r\n    {\r\n        //fprintf(stderr, \"Unable to connect %s\\n\", modbus_strerror(errno));\r\n        modbus_free(ctx);\r\n        vTaskDelete(NULL);\r\n        // 异常退出\r\n    }\r\n\r\n    // 主任务循环\r\n    for (;;)\r\n    {\r\n        // 接收Modbus请求（过滤无效查询）\r\n        do\r\n        {\r\n            rc = modbus_receive(ctx, query);\r\n\r\n            if (rc > 0)\r\n                HAL_IWDG_Refresh(&hiwdg);\r\n            /* Filtered queries return 0 */\r\n        } while (rc == 0);\r\n\r\n        // 错误处理（保留CRC校验错误连接）\r\n        if (rc == -1 && errno != EMBBADCRC)\r\n        {\r\n            /* Quit */\r\n            continue;\r\n        }\r\n\r\n        /* update values of registers\r\n         * a. read gpio\r\n         * b. update reg\r\n         */\r\n        // 发送Modbus响应\r\n\r\n#ifdef USE_SWITCH_SENSOR\r\n        /* key1 */\r\n        val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);\r\n        if (val == GPIO_PIN_RESET)\r\n        {\r\n            mb_mapping->tab_input_bits[0] = 1;\r\n        }\r\n        else\r\n        {\r\n            mb_mapping->tab_input_bits[0] = 0;\r\n        }\r\n\r\n        /* key2 */\r\n        val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);\r\n        if (val == GPIO_PIN_RESET)\r\n        {\r\n            mb_mapping->tab_input_bits[1] = 1;\r\n        }\r\n        else\r\n        {\r\n            mb_mapping->tab_input_bits[1] = 0;\r\n        }\r\n\r\n        /* key3 */\r\n        val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);\r\n        if (val == GPIO_PIN_RESET)\r\n        {\r\n            mb_mapping->tab_input_bits[2] = 1;\r\n        }\r\n        else\r\n        {\r\n            mb_mapping->tab_input_bits[2] = 0;\r\n        }\r\n\r\n#endif\r\n\r\n#ifdef USE_QSB\r\n        /* 更新ADC采样值到输入寄存器 */\r\n#ifdef PM\r\n        // uint16_t adc_val[2];\r\n\r\n        // for (int i = 0; i < 2; i++)\r\n        // {\r\n        //     HAL_ADC_Start(&hadc);\r\n        //     if (HAL_OK == HAL_ADC_PollForConversion(&hadc, 100))\r\n        //     {\r\n        //         adc_val[i] = HAL_ADC_GetValue(&hadc);\r\n        //     }\r\n        // }\r\n        // // 火焰传感器阈值检测（通道0）\r\n        // if (adc_val[0] <= 600 || beep_flag)\r\n        // {\r\n        //     mb_mapping->tab_bits[1] = 1; // 设置线圈寄存器1\r\n        //     mb_mapping->tab_bits[0] = 1;\r\n        //     beep_flag               = 1; // 触发蜂鸣器标志\r\n        // }\r\n\r\n#else\r\n        for (int i = 0; i < 2; i++)\r\n        {\r\n            HAL_ADC_Start(&hadc);\r\n            if (HAL_OK == HAL_ADC_PollForConversion(&hadc, 100))\r\n            {\r\n                mb_mapping->tab_input_registers[i + 2] = HAL_ADC_GetValue(&hadc);\r\n            }\r\n        }\r\n        // 火焰传感器阈值检测（通道0）\r\n        if (mb_mapping->tab_input_registers[2] <= 600 || beep_flag)\r\n        {\r\n            mb_mapping->tab_bits[1] = 1; // 设置线圈寄存器1\r\n            mb_mapping->tab_bits[0] = 1;\r\n            beep_flag               = 1; // 触发蜂鸣器标志\r\n        }\r\n\r\n#endif\r\n\r\n#ifdef QT\r\n        // 货物距离传感器通道1阈值检测（离散输入）如果是气体传感器则是气体阈值\r\n        if (mb_mapping->tab_input_registers[3] >= 1500)\r\n        {\r\n            gas_flag                      = 1;\r\n            mb_mapping->tab_input_bits[0] = 1;\r\n        }\r\n        else\r\n        {\r\n            gas_flag                      = 0;\r\n            mb_mapping->tab_input_bits[0] = 0;\r\n        }\r\n#elif defined(PM)\r\n        //        if (adc_val[1] <= 600)\r\n        //        {\r\n        //            mb_mapping->tab_input_bits[0] = 1;\r\n        //        }\r\n        //        else\r\n        //        {\r\n        //            mb_mapping->tab_input_bits[0] = 0;\r\n        //        }\r\n\r\n#else\r\n        if (mb_mapping->tab_input_registers[3] <= 600)\r\n        {\r\n            mb_mapping->tab_input_bits[0] = 1;\r\n        }\r\n        else\r\n        {\r\n            mb_mapping->tab_input_bits[0] = 0;\r\n        }\r\n#endif\r\n#endif\r\n\r\n#ifdef USE_QSB\r\n        /* \r\n         * AHT20温湿度数据更新（非实时采集）\r\n         * 从全局变量获取预处理好的传感器数据\r\n         * 寄存器分配：\r\n         *   [0] 温度值（0.1℃精度）\r\n         *   [1] 湿度值（0.1%精度） \r\n         * 注意：此处仅更新寄存器值，实际采集在AHT20Task线程完成\r\n         */\r\n        uint16_t temp, humi;\r\n        aht20_get_datas(&temp, &humi);             // 从全局变量获取最新数据\r\n        mb_mapping->tab_input_registers[0] = temp; // 更新温度输入寄存器\r\n        mb_mapping->tab_input_registers[1] = humi; // 更新湿度输入寄存器\r\n#ifdef PM\r\n        PM_SensorData fPM_Data;\r\n\r\n        PM_get_datas(&fPM_Data);\r\n        mb_mapping->tab_input_registers[2]  = fPM_Data.pm1_0_cf1;\r\n        mb_mapping->tab_input_registers[3]  = fPM_Data.pm2_5_cf1;\r\n        mb_mapping->tab_input_registers[4]  = fPM_Data.pm10_cf1;\r\n        mb_mapping->tab_input_registers[5]  = fPM_Data.pm1_0_atm;\r\n        mb_mapping->tab_input_registers[6]  = fPM_Data.pm2_5_atm;\r\n        mb_mapping->tab_input_registers[7]  = fPM_Data.pm10_atm;\r\n        mb_mapping->tab_input_registers[8]  = fPM_Data.particles_0_3um;\r\n        mb_mapping->tab_input_registers[9]  = fPM_Data.particles_0_5um;\r\n        mb_mapping->tab_input_registers[10] = fPM_Data.particles_1_0um;\r\n        mb_mapping->tab_input_registers[11] = fPM_Data.particles_2_5um;\r\n        mb_mapping->tab_input_registers[12] = fPM_Data.particles_5_0um;\r\n        mb_mapping->tab_input_registers[13] = fPM_Data.particles_10um;\r\n\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef BH1750\r\n        uint16_t light;\r\n        BH1750_get_datas(&light);\r\n        mb_mapping->tab_input_registers[4] = light; // 更新湿度输入寄存器\r\n#endif\r\n\r\n        rc = modbus_reply(ctx, query, rc, mb_mapping);\r\n        if (rc == -1)\r\n        {\r\n            //break;\r\n        }\r\n        /* 设备控制段 */\r\n#ifdef USE_SWITCH_SENSOR\r\n        /* switch1 */\r\n        if (mb_mapping->tab_bits[0])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   //switch1\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //switch1\r\n\r\n                                                                  /* switch2 */\r\n        if (mb_mapping->tab_bits[1])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);   //switch2\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //switch2\r\n\r\n        if (mb_mapping->tab_bits[2])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //LED1\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   //LED1\r\n\r\n        if (mb_mapping->tab_bits[3])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //LED2\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   //LED2\r\n\r\n        if (mb_mapping->tab_bits[4])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); //LED3\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   //LED3\r\n#endif\r\n\r\n#ifdef USE_ENV_MONITOR_SENSOR\r\n        /* beep1 */\r\n        if (mb_mapping->tab_bits[0])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);   //beep1\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //beep1\r\n\r\n        /* beep2 */\r\n        if (mb_mapping->tab_bits[1])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   //beep2\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //beep2\r\n\r\n        if (mb_mapping->tab_bits[2])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //LED1\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   //LED1\r\n\r\n        if (mb_mapping->tab_bits[3])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //LED2\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   //LED2\r\n\r\n        if (mb_mapping->tab_bits[4])\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); //LED3\r\n        else\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   //LED3\r\n#endif\r\n\r\n#ifdef USE_QSB\r\n\r\n        // 蜂鸣器控制（线圈寄存器0）\r\n        if (mb_mapping->tab_bits[0] && !beep_flag)\r\n        {\r\n            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); /